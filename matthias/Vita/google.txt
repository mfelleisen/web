
* Matthias has been involved in "type analysis" for Scheme since 1988,
  starting with Cartwright and Fagan's soft typing approach. They based
  their work on ML-style inference, but built only a small prototype.
  Matthias inspired Wright to implement a full-fledged Soft Scheme
  language, i.e., a dialect of Chez Scheme that uses Hindley-Milner style
  inference and accommodates many standard Scheme idioms. Once it became
  clear that ordinary programmers couldn't use Soft Scheme and its HM
  inference, Matthias began to explore the use of set-based analysis [a
  flavor of my CFA] for the same purpose.  With Flanagan (now of ESC Java
  fame) and Meunier, he designed and implemented two analysis systems for
  Scheme that could not only find reasonable set [type] descriptions of
  programs, but they could also explain their reasoning by drawing
  flow-graphs on top of programs (in their DrScheme editing system).

  Around 2003 Matthias decided that analysis-based approaches without some
  programmer support wouldn't work. He switched to a research program of
  "script evolution". The revised goal is to help programmers gradually
  move modular programs from untyped scripting languages to explicitly
  typed sister languages. His expectation is to eventually use analysis
  tools for both the actual script conversion and on the explicitly typed
  code. By introducing explicit types into the language, he hopes to
  eliminate the precision and performance problems that continued to plague
  his purely inference-based approaches from the 1990s.

