((3) 3 (((lib "scribble/decode-struct.rkt") . deserialize-info:part-index-desc-v0) ((lib "scribble/render-struct.rkt") . deserialize-info:mobile-root-v0) ((lib "scribble/core.rkt") . deserialize-info:element-v0)) 377 ("figure" "value" (c counter c (c (? . 0) c (? . 81))) "Pipelines" (c part c (? . 3)) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_three.html" . unix) "Inspecting Code for Coding Flaws" "A Short Note on Conditionals and Loops" (0) (c counter c (c (? . 0) c (? . 87))) "From Information to Classes via Doodling" (q part "ch:3review") (q part "sec:context") "exercise" (q "value") (q part "Inspecting_Code_for_Coding_Flaws") (c (? . 6)) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_five.html" . unix) (c counter c (c (? . 13) c (? . 85))) "An Interface is the Common Ontology for Clients and Server" "Reacting to a Code Inspection" "fig:game-plan-fixed" (c counter c (c (? . 0) c (? . 21))) (c tech c (? . 76)) (q part "sec:ontology") (c (? . 19)) (q part "part:preface") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_preface.html" . unix) (q part "part:two") (c (u . "II")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_two.html" . unix) (q part "ch:project") (c (u . "III")) "A General Guide to Code Inspections" (c counter c (c (? . 0) c (? . 139))) (q part "sec:fun-vs-meth") (c (u . "V")) (q part "Structured_Information__Don_t_Use_Strings_to_Represent_It") (c 22 ? . 36) (c counter c (c (? . 0) c (? . 206))) (q part "part:five") "Pair Programming" "From Information to Data Representations, And Back" (q part "sec:doodle") (c (? . 10)) (c 1 ? . 38) "Developing Data Representations for Composition" (c counter c (c (? . 0) c (? . 115))) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_four.html" . unix) (c counter c (c (? . 0) c (? . 69))) (q part "ch:sw-arch") (c 9 ? . 32) (c counter c (c (? . 0) c (? . 286))) "Inspecting Simple Interface Designs" (q part "this") (q part "ch:inspect") (q part "srsd") "Ways to Proceed" (c counter c (c (? . 0) c (? . 304))) "ex:design-alternative" (c counter c (c (? . 13) c (? . 59))) (q part "Information_that_is_Considered_Atomic") (c counter c (c (? . 0) c (? . 333))) (c counter c (c (? . 0) c (? . 248))) "Information that is Considered Atomic" (c (? . 64)) "ex:design-inspection-2" (c counter c (c (? . 13) c (? . 66))) (c counter c (c (? . 0) c (? . 371))) "fig:info-data" "Inspections and Design Alternatives" "Component Discovery" (c counter c (c (? . 13) c (? . 317))) (q part "sec:api-design") (c (u . "IV")) "Inspecting" "length" (q part "Construction_Plan") (q part "ch:inspect-summary") (c (? . 33)) (c 23 ? . 36) "fig:system-boundary" (c counter c (c (? . 0) c (? . 106))) (c counter c (c (? . 0) c (? . 176))) (q part "sec:data-design") "ex:data-interp" "Designing Functions, Systematically" "fig:factored" (q part "sec:srsd-sys-good") (c counter c (c (? . 0) c (? . 226))) (q part "ch:ego") (q part "part:postlude") (c counter c (c (? . 13) c (? . 149))) "README Files" (q part "ch:present") (q part "sec:method-design") (q part "sec:documents") "ex:thermostat-data" (c counter c (c (? . 13) c (? . 97))) (c counter c (c (? . 13) c (? . 254))) "Core Idea" (c counter c (c (? . 13) c (? . 345))) (q part "sec:data-design2") (c (? . 46)) "The Size of Functions and Methods" "Favor Functions, Favor Immutability" "fig:sa-mvc" (c counter c (c (? . 0) c (? . 334))) (q "Structured Information: Don" rsquo "t Use Strings to Represent It") (c counter c (c (? . 0) c (? . 356))) (c counter c (c (? . 13) c (? . 193))) (q part "sec:api-expression") (q part "ch:managing") "Context Analysis" (c counter c (c (? . 0) c (? . 150))) "fig:good-encapsulation-server" (q part "sec:intf-inspection") (c (? . 70)) "fig:system-run" (c counter c (c (? . 0) c (? . 118))) (q part "sec:react-encapsulation") (c (? . 3)) (c counter c (c (? . 0) c (? . 151))) "Interface Inspections for Encapsulation" (c counter c (c (? . 0) c (? . 132))) "fig:player-state" (c counter c (c (? . 0) c (? . 125))) (q part "README_Files") (c (? . 93)) (c 4 ? . 80) "ex:unstable" (c counter c (c (? . 13) c (? . 130))) "fig:bad-encapsulation-client" "fig:pc" (c counter c (c (? . 0) c (? . 133))) "ex:game-state" (c counter c (c (? . 13) c (? . 135))) "Presenting" (c part c (? . 137)) "fig:layers" "fig:sa-pipes" (c counter c (c (? . 0) c (? . 140))) (q part "post:life") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_postlude.html" . unix) (c part c (u . "chap:part:postlude")) (c counter c (c (? . 0) c (? . 287))) (q part "ch:sample-project") (c 10 ? . 32) "Inspecting Code for Errors and Test Coverage Problems" "ex:design-inspection" "fig:feedback-loop" "fig:use-cases++" (q part "sec:project-proceed") (c (? . 57)) (q part "part:four") "Developing Data Representations for Information" (c (? . 155)) (c counter c (c (? . 0) c (? . 215))) "fig:bad-encapsulation-server" (c counter c (c (? . 0) c (? . 158))) (q part "ch:modules") (c 14 ? . 74) (q part "Favor_Functions__Favor_Immutability") (c (? . 105)) (c 6 ? . 38) (q part "sub:if-example1") (c (? . 53)) (c 15 ? . 74) (q part "part:three") "Presenting Systematically Designed Code" (c (? . 169)) (c counter c (c (? . 13) c (? . 185))) (q part "ch:lab") (q part "sec:meth-example") (q part "ch:comments") (c counter c (c (? . 0) c (? . 205))) "fig:sa-client-server-x" (q part "Model__View__Controller") "fig:sa-client-server" (c counter c (c (? . 0) c (? . 178))) (q part "Core_Idea") (c (? . 100)) (c part c (? . 75)) (c (? . 75)) (q part "ch:systematic") "ex:tiny2" (q part "ch:pair") (c (? . 41)) (c counter c (c (? . 0) c (? . 305))) "Documents: Start the README, Before the Coding Begins" (c (? . 189)) "Encapsulating Properly" (c (? . 191)) "ex:java-poly" (q part "post:onward") (c counter c (c (? . 0) c (? . 365))) "ex:tiny3" (c counter c (c (? . 13) c (? . 196))) (q part "sec:fun-example") (q part "ch:socially-responsible") "fig:client-example" (c counter c (c (? . 0) c (? . 200))) "fig:inspection-2-memo" (c counter c (c (? . 0) c (? . 202))) (c counter c (c (? . 0) c (? . 249))) "fig:branches-uniform" "fig:code-bad-py" (q part "sec:names") "fig:board-diagram" (c counter c (c (? . 0) c (? . 208))) (c counter c (c (? . 13) c (? . 370))) (q part "Inspecting_Code_for_Design_Mistakes") (c 21 ? . 36) "Designing Methods, Systematically" (c (? . 213)) "fig:game-plan" "Construction Plan" (c (? . 216)) (c part c (u . "chap:part:preface")) "fig:player-rest" (c counter c (c (? . 0) c (? . 219))) (q part "ackn") (q part "ch:old-if") (c 13 ? . 74) "fig:data-bad" (c counter c (c (? . 0) c (? . 224))) "fig:contract1" (q part "ch:project-idea") (c 8 ? . 32) (c (? . 137)) "Methods vs Functions" (c (? . 230)) (c counter c (c (? . 0) c (? . 288))) (q part "ch:inspect-design") "Inspecting Systematically Designed Code" (c (? . 234)) "fig:co-schematic" (c counter c (c (? . 0) c (? . 236))) (q part "Context_Analysis") (c (? . 113)) (q part "Inspecting_Code_for_Errors_and_Test_Coverage_Problems") (c (? . 148)) (q part "sec:push-back") "ex:tiny1" (c counter c (c (? . 13) c (? . 243))) (q part "sec:size-of") (c (? . 104)) (c 20 ? . 36) "fig:uncompose" "fig:xyz" "Structured Information: Use Structs, Records, Objects" "fig:readme-dynamic" (c counter c (c (? . 0) c (? . 251))) (c counter c (c (? . 13) c (? . 361))) "ex:protocol" "ex:readme" (c counter c (c (? . 13) c (? . 255))) (q part "ch:life") (c (u . "I")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_one.html" . unix) (q part "ch:overview") "Choosing from Several Alternatives" "ex:user-responsibility" (c counter c (c (? . 13) c (? . 262))) (c counter c (c (? . 13) c (? . 364))) (c counter c (c (? . 0) c (? . 277))) "fig:inspection" (c counter c (c (? . 0) c (? . 266))) (q part "sec:identify-components") "fig:fun-seq" (c counter c (c (? . 0) c (? . 269))) "ex:naming" (c counter c (c (? . 13) c (? . 271))) "fig:code-good-aux" (c counter c (c (? . 0) c (? . 273))) "ex:asts" (c counter c (c (? . 13) c (? . 275))) "fig:pieces-if-1" "fig:components" (c counter c (c (? . 0) c (? . 278))) (q part "ch:design-alt") (c 17 ? . 74) "fig:inspection-design-mistake" (c counter c (c (? . 0) c (? . 282))) "Pushing Back During a Code Inspection" (c (? . 284)) "fig:coordinate-enscapsulation" "fig:sa-client-server-xyz" "fig:sample-memo" (q part "Structured_Information__Use_Structs__Records__Objects") (c (? . 250)) (c counter c (c (? . 0) c (? . 301))) (q part "Choosing_from_Several_Alternatives") (c (? . 261)) (q part "part:one") "A Second Look at the Tiny Case Study" (c (? . 295)) (q part "ch:3art") "Model, View, Controller" (c (? . 298)) "Client, Server" "fig:interface-schematic" "Names Matter" (c (? . 302)) "fig:inspection-error" "fig:compose-meth" "fig:code-good-outline" (c counter c (c (? . 0) c (? . 306))) "Planning: How the Construction Proceeds" "Synthesis: Discovering Components" (c (? . 309)) "fig:compose" (c counter c (c (? . 0) c (? . 311))) (q part "A_Code_Inspection_Memo") (q part "sec:function-design") (c (? . 86)) (q part "skills") "ex:memo2" "ex:java-list" (c counter c (c (? . 13) c (? . 318))) "fig:oo-seq" (c counter c (c (? . 0) c (? . 320))) (q part "dear") (q part "sec:encapsulation") (c (? . 123)) "fig:use-cases" (c counter c (c (? . 0) c (? . 325))) "fig:reviews" (c counter c (c (? . 0) c (? . 327))) (q part "Client__Server") (c (? . 300)) "The Labyrinth Game: A Problem Statement" (c (? . 331)) "fig:interface" "fig:data-rep-good" (q part "sec:project-facets") (q "Analysis: Understanding the Project" rsquo "s Purpose and Context") "ex:data-rep" (c counter c (c (? . 13) c (? . 337))) "Inspecting Code for Design Mistakes" (c (? . 339)) (q part "post:ai") (q part "ch:why-design-inspection") (c 12 ? . 32) (q part "ch:inspect-code") "ex:organize" (q part "Reacting_to_a_Code_Inspection") (c (? . 20)) (q part "sec:conditions") (c (? . 7)) (q part "Component_Discovery") (c (? . 71)) "Atomic vs Composite: A Tiny Case Study" (c (? . 352)) "fig:code-good" (c counter c (c (? . 0) c (? . 354))) "fig:add1-diagram" "ex:named-constants" (c counter c (c (? . 13) c (? . 357))) (q part "sec:project-plan") (c (? . 308)) "ex:reliability" (q part "From_Information_to_Data_Representations__And_Back") (c (? . 42)) "ex:purpose1" "fig:system-analysis" "A Code Inspection Memo" (c (? . 366)) "fig:monolith" (c counter c (c (? . 0) c (? . 368))) "ex:merge" "fig:gs-diagram" (q part "ch:basics") "fig:waterfall" (c counter c (c (? . 0) c (? . 373))) "Why Systematic Design is Socially Responsible" (c (? . 375))) () (c (1 #f) h ! (equal) ((c counter c (c (? . 0) c (? . 354) c (? . 1))) . 50) ((c counter c (c (? . 0) c (? . 118) c (? . 1))) . 3) ((c counter c (c (? . 13) c (? . 66) ? . 14)) . 10) ((? . 2) v! #f (? . 2) #f (? . 5) #f) ((? . 4) v! (? . 121) (? . 4) (c 1 ? . 51) (? . 5) #f) ((c index-entry c (? . 15)) c (c (? . 6)) c (c (2 #f (? . 16))) c (? . 8)) ((c index-entry c (? . 348)) c (c (? . 7)) c (c (2 #f (? . 349))) c (? . 8)) ((? . 9) v! #f (? . 9) #f (? . 17) #f) ((c index-entry c (? . 43)) c (c (? . 10)) c (c (2 #f (? . 44))) c (? . 8)) ((? . 11) v! (q "Software Inspections") (? . 11) (c 6 ? . 29) (? . 30) #f) ((? . 12) v! (q "The Context, for the Instructor") (? . 12) (q #f #f #f) (? . 27) #f) ((c counter c (c (? . 13) c (? . 97) ? . 14)) . 12) ((c counter c (c (? . 13) c (? . 255) ? . 14)) . 7) ((c counter c (c (? . 0) c (? . 21) c (? . 1))) . 17) ((? . 15) v! (? . 16) (? . 15) (c 1 ? . 212) (? . 17) #f) ((? . 18) v! #f (? . 18) #f (? . 17) #f) ((c index-entry c (? . 24)) c (c (? . 19)) c (c (2 #f (? . 25))) c (? . 8)) ((c index-entry c (? . 346)) c (c (? . 20)) c (c (2 #f (? . 347))) c (? . 8)) ((? . 22) v! #f (? . 22) #f (? . 5) #f) ((? . 23) v! #f (? . 23) #f (? . 5) #f) ((c counter c (c (? . 0) c (? . 140) c (? . 1))) . 10) ((? . 24) v! (? . 25) (? . 24) (c 1 ? . 223) (? . 48) #f) ((? . 26) v! (c (2 smaller (q "Prelude"))) (? . 26) (q #f) (? . 27) #t) ((? . 28) v! (c (2 smaller (q "Principles"))) (? . 28) (? . 29) (? . 30) #t) ((c counter c (c (? . 13) c (? . 262) ? . 14)) . 1) ((? . 31) v! (q "Running a Software Systems") (? . 31) (c 7 ? . 32) (? . 5) #f) ((c index-entry c (? . 78)) c (c (? . 33)) c (c (2 #f (? . 79))) c (? . 8)) ((? . 34) v! #f (? . 34) #f (? . 5) #f) ((? . 35) v! (? . 231) (? . 35) (c 3 ? . 38) (? . 17) #f) ((c counter c (c (? . 0) c (? . 306) c (? . 1))) . 48) ((c counter c (c (? . 13) c (? . 59) ? . 14)) . 11) ((? . 37) v! (? . 108) (? . 37) (c 2 ? . 45) (? . 17) #f) ((? . 39) v! #f (? . 39) #f (? . 17) #f) ((? . 40) v! (c (2 smaller (q "Programming Basics"))) (? . 40) (? . 36) (? . 17) #t) ((c index-entry c (? . 186)) c (c (? . 41)) c (c (2 #f (? . 187))) c (? . 8)) ((c index-entry c (? . 362)) c (c (? . 42)) c (c (2 #f (? . 363))) c (? . 8)) ((? . 43) v! (? . 44) (? . 43) (c 5 ? . 45) (? . 17) #f) ((c index-entry c (? . 102)) c (c (? . 46)) c (c (2 #f (? . 103))) c (? . 8)) ((c counter c (c (? . 0) c (? . 368) c (? . 1))) . 33) ((? . 47) v! #f (? . 47) #f (? . 48) #f) ((? . 49) v! #f (? . 49) #f (? . 17) #f) ((? . 50) v! (q "Software Architecture") (? . 50) (? . 51) (? . 5) #f) ((? . 52) v! #f (? . 52) #f (? . 48) #f) ((c index-entry c (? . 165)) c (c (? . 53)) c (c (2 #f (? . 166))) c (? . 8)) ((? . 54) v! (q "This Book and Its Parts") (? . 54) (q #f #f #f) (? . 27) #f) ((? . 55) v! (? . 235) (? . 55) (c 3 ? . 80) (? . 17) #f) ((? . 56) v! (c "Socially Responsible " c (2 newline "") q " Software Development") (? . 56) () (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/index.html" . unix) #t) ((c index-entry c (? . 152)) c (c (? . 57)) c (c (2 #f (? . 153))) c (? . 8)) ((? . 58) v! #f (? . 58) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 251) c (? . 1))) . 55) ((? . 60) v! #f (? . 60) #f (? . 48) #f) ((? . 61) v! (? . 65) (? . 61) (c 1 ? . 45) (? . 17) #f) ((? . 62) v! #f (? . 62) #f (? . 48) #f) ((c counter c (c (? . 13) c (? . 196) ? . 14)) . 23) ((? . 63) v! #f (? . 63) #f (? . 17) #f) ((c index-entry c (? . 61)) c (c (? . 64)) c (c (2 #f (? . 65))) c (? . 8)) ((? . 67) v! #f (? . 67) #f (? . 48) #f) ((? . 68) v! #f (? . 68) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 69) c (? . 1))) . 41) ((c index-entry c (? . 116)) c (c (? . 70)) c (c (2 #f (? . 117))) c (? . 8)) ((c counter c (c (? . 0) c (? . 266) c (? . 1))) . 36) ((c index-entry c (? . 350)) c (c (? . 71)) c (c (2 #f (? . 351))) c (? . 8)) ((? . 72) v! #f (? . 72) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 373) c (? . 1))) . 4) ((? . 73) v! (q "Designing an Interface") (? . 73) (? . 167) (? . 48) #f) ((c index-entry c (? . 182)) c (c (? . 75)) c (c (2 #f (? . 183))) c (? . 8)) ((c index-entry c (? . 23)) c (c (? . 76)) c (c (2 italic (? . 76))) q tech) ((c counter c (c (? . 0) c (? . 269) c (? . 1))) . 32) ((? . 77) v! (? . 217) (? . 77) (c 4 ? . 147) (? . 5) #f) ((? . 78) v! (? . 79) (? . 78) (? . 129) (? . 17) #f) ((c counter c (c (? . 0) c (? . 81) c (? . 1))) . 6) ((? . 82) v! #f (? . 82) #f (? . 5) #f) ((? . 83) v! #f (? . 83) #f (? . 5) #f) ((? . 84) v! (? . 156) (? . 84) (? . 45) (? . 17) #f) ((c counter c (c (? . 13) c (? . 85) ? . 14)) . 18) ((c index-entry c (? . 314)) c (c (? . 86)) c (c (2 #f (? . 315))) c (? . 8)) ((c counter c (c (? . 0) c (? . 202) c (? . 1))) . 38) ((c counter c (c (? . 0) c (? . 87) c (? . 1))) . 34) ((? . 88) v! (? . 376) (? . 88) (c 8 ? . 38) (? . 17) #f) ((? . 89) v! #f (? . 89) #f (? . 48) #f) ((c counter c (c (? . 13) c (? . 318) ? . 14)) . 20) ((? . 90) v! (q "Egoless Programming") (? . 90) (c 4 ? . 29) (? . 30) #f) ((c counter c (c (? . 0) c (? . 133) c (? . 1))) . 1) ((? . 91) v! (c (2 smaller (q "Postlude"))) (? . 91) (q #f) (? . 143) #t) ((? . 92) v! #f (? . 92) #f (? . 5) #f) ((c counter c (c (? . 0) c (? . 125) c (? . 1))) . 30) ((c index-entry c (? . 127)) c (c (? . 93)) c (c (2 #f (? . 128))) c (? . 8)) ((? . 94) v! (? . 170) (? . 94) (c 2 ? . 80) (? . 17) #f) ((? . 95) v! (? . 214) (? . 95) (? . 164) (? . 17) #f) ((? . 96) v! (? . 190) (? . 96) (c 1 ? . 343) (? . 5) #f) ((? . 98) v! #f (? . 98) #f (? . 17) #f) ((? . 99) v! #f (? . 99) #f (? . 48) #f) ((c index-entry c (? . 180)) c (c (? . 100)) c (c (2 #f (? . 181))) c (? . 8)) ((? . 101) v! #f (? . 101) #f (? . 5) #f) ((c counter c (c (? . 13) c (? . 357) ? . 14)) . 13) ((? . 102) v! (? . 103) (? . 102) (c 2 ? . 38) (? . 17) #f) ((c index-entry c (? . 245)) c (c (? . 104)) c (c (2 #f (? . 246))) c (? . 8)) ((c counter c (c (? . 0) c (? . 325) c (? . 1))) . 7) ((c index-entry c (? . 162)) c (c (? . 105)) c (c (2 #f (? . 163))) c (? . 8)) ((c counter c (c (? . 0) c (? . 106) c (? . 1))) . 11) ((c counter c (c (? . 0) c (? . 200) c (? . 1))) . 26) ((? . 107) v! #f (? . 107) #f (? . 17) #f) ((c index-entry c (? . 37)) c (q "Structured Information: Don't Use Strings to Represent It") c (c (2 #f (? . 108))) c (? . 8)) ((? . 109) v! #f (? . 109) #f (? . 17) #f) ((? . 110) v! #f (? . 110) #f (? . 48) #f) ((? . 111) v! (q "Expressing an Interface") (? . 111) (c 16 ? . 74) (? . 48) #f) ((? . 112) v! (q "Inspecting the Plan") (? . 112) (c 11 ? . 32) (? . 5) #f) ((c index-entry c (? . 238)) c (c (? . 113)) c (c (2 #f (? . 239))) c (? . 8)) ((? . 114) v! #f (? . 114) #f (? . 48) #f) ((c counter c (c (? . 0) c (? . 273) c (? . 1))) . 51) ((c counter c (c (? . 0) c (? . 115) c (? . 1))) . 23) ((c counter c (c (? . 13) c (? . 130) ? . 14)) . 3) ((? . 116) v! (? . 117) (? . 116) (c 1 ? . 281) (? . 48) #f) ((? . 119) v! #f (? . 119) #f (? . 5) #f) ((? . 120) v! (? . 192) (? . 120) (c 2 ? . 161) (? . 48) #f) ((c index-entry c (? . 4)) c (c (? . 3)) c (c (2 #f (? . 121))) c (? . 8)) ((? . 122) v! #f (? . 122) #f (? . 5) #f) ((c index-entry c (? . 323)) c (c (? . 123)) c (c (2 #f (? . 324))) c (? . 8)) ((? . 124) v! #f (? . 124) #f (? . 48) #f) ((? . 126) v! #f (? . 126) #f (? . 48) #f) ((? . 127) v! (? . 128) (? . 127) (c 1 ? . 129) (? . 17) #f) ((? . 131) v! #f (? . 131) #f (? . 5) #f) ((c counter c (c (? . 13) c (? . 135) ? . 14)) . 5) ((c counter c (c (? . 0) c (? . 132) c (? . 1))) . 22) ((? . 134) v! #f (? . 134) #f (? . 27) #f) ((? . 136) v! #f (? . 136) #f (? . 5) #f) ((? . 138) v! (? . 229) (? . 138) (c 2 ? . 129) (? . 17) #f) ((c counter c (c (? . 0) c (? . 139) c (? . 1))) . 9) ((? . 141) v! #f (? . 141) #f (? . 5) #f) ((? . 142) v! (q "A Mindset for Life") (? . 142) (q #f #f #f) (? . 143) #f) ((? . 144) v! () (? . 144) (q #f #f) (? . 143) #f) ((? . 145) v! #f (? . 145) #f (? . 5) #f) ((? . 146) v! (q "A Sample Project: Analysis, Discovery, Planning") (? . 146) (? . 147) (? . 5) #f) ((c index-entry c (? . 240)) c (c (? . 148)) c (c (2 #f (? . 241))) c (? . 8)) ((c counter c (c (? . 13) c (? . 149) ? . 14)) . 6) ((c counter c (c (? . 0) c (? . 158) c (? . 1))) . 21) ((c counter c (c (? . 0) c (? . 150) c (? . 1))) . 24) ((c counter c (c (? . 0) c (? . 151) c (? . 1))) . 8) ((? . 152) v! (? . 153) (? . 152) (c 1 ? . 228) (? . 5) #f) ((? . 154) v! (c (2 smaller (q "Programming Interfaces"))) (? . 154) (? . 74) (? . 48) #t) ((c index-entry c (? . 84)) c (c (? . 155)) c (c (2 #f (? . 156))) c (? . 8)) ((? . 157) v! #f (? . 157) #f (? . 5) #f) ((? . 159) v! #f (? . 159) #f (? . 48) #f) ((? . 160) v! (q "Encapsulation via Interfaces") (? . 160) (? . 161) (? . 48) #f) ((? . 162) v! (? . 163) (? . 162) (c 1 ? . 164) (? . 17) #f) ((? . 165) v! (? . 166) (? . 165) (c 1 ? . 167) (? . 48) #f) ((? . 168) v! (c (2 smaller (q "Project"))) (? . 168) (? . 32) (? . 5) #t) ((c index-entry c (? . 94)) c (c (? . 169)) c (c (2 #f (? . 170))) c (? . 8)) ((? . 171) v! #f (? . 171) #f (? . 17) #f) ((? . 172) v! (? . 332) (? . 172) (c 1 ? . 80) (? . 17) #f) ((c counter c (c (? . 13) c (? . 337) ? . 14)) . 17) ((? . 173) v! (? . 296) (? . 173) (c 7 ? . 38) (? . 17) #f) ((? . 174) v! (q "Comments are Needed in a Small Number of Places") (? . 174) (c 19 ? . 36) (? . 17) #f) ((? . 175) v! #f (? . 175) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 176) c (? . 1))) . 13) ((c counter c (c (? . 0) c (? . 178) c (? . 1))) . 12) ((c counter c (c (? . 0) c (? . 208) c (? . 1))) . 49) ((? . 177) v! (? . 299) (? . 177) (c 2 ? . 51) (? . 5) #f) ((? . 179) v! #f (? . 179) #f (? . 5) #f) ((c counter c (c (? . 0) c (? . 224) c (? . 1))) . 52) ((? . 180) v! (? . 181) (? . 180) (c 1 ? . 147) (? . 5) #f) ((? . 182) v! (? . 183) (? . 182) (c 3 ? . 129) (? . 17) #f) ((c counter c (c (? . 0) c (? . 320) c (? . 1))) . 31) ((? . 184) v! (q "Systematic Design, the Basics") (? . 184) (? . 38) (? . 17) #f) ((c counter c (c (? . 13) c (? . 185) ? . 14)) . 22) ((? . 186) v! (? . 187) (? . 186) (c 5 ? . 29) (? . 30) #f) ((? . 188) v! #f (? . 188) #f (? . 17) #f) ((c index-entry c (? . 96)) c (c (? . 189)) c (c (2 #f (? . 190))) c (? . 8)) ((c index-entry c (? . 120)) c (c (? . 191)) c (c (2 #f (? . 192))) c (? . 8)) ((c counter c (c (? . 13) c (? . 193) ? . 14)) . 9) ((c counter c (c (? . 0) c (? . 236) c (? . 1))) . 19) ((? . 194) v! (q "Onward") (? . 194) (q #f #f #f) (? . 143) #f) ((c counter c (c (? . 0) c (? . 282) c (? . 1))) . 40) ((c counter c (c (? . 0) c (? . 219) c (? . 1))) . 29) ((? . 195) v! #f (? . 195) #f (? . 5) #f) ((? . 197) v! #f (? . 197) #f (? . 17) #f) ((? . 198) v! (? . 353) (? . 198) (c 5 ? . 38) (? . 17) #f) ((? . 199) v! (q "Are You Socially Responsible?") (? . 199) (c 2 ? . 258) (? . 259) #f) ((? . 201) v! #f (? . 201) #f (? . 48) #f) ((? . 203) v! #f (? . 203) #f (? . 17) #f) ((? . 204) v! #f (? . 204) #f (? . 17) #f) ((c counter c (c (? . 13) c (? . 243) ? . 14)) . 21) ((c counter c (c (? . 0) c (? . 205) c (? . 1))) . 35) ((c counter c (c (? . 0) c (? . 206) c (? . 1))) . 53) ((? . 207) v! (? . 303) (? . 207) (c 1 ? . 247) (? . 17) #f) ((c counter c (c (? . 13) c (? . 271) ? . 14)) . 14) ((? . 209) v! #f (? . 209) #f (? . 17) #f) ((? . 210) v! #f (? . 210) #f (? . 17) #f) ((? . 211) v! (? . 340) (? . 211) (c 6 ? . 212) (? . 17) #f) ((c index-entry c (? . 95)) c (c (? . 213)) c (c (2 #f (? . 214))) c (? . 8)) ((c counter c (c (? . 0) c (? . 215) c (? . 1))) . 15) ((c index-entry c (? . 77)) c (c (? . 216)) c (c (2 #f (? . 217))) c (? . 8)) ((? . 218) v! () (? . 218) (q #f #f) (? . 27) #f) ((? . 220) v! #f (? . 220) #f (? . 48) #f) ((? . 221) v! (q "Acknowledgments") (? . 221) (q #f #f #f) (? . 27) #f) ((? . 222) v! (q "The Nature of Interfaces") (? . 222) (? . 223) (? . 48) #f) ((? . 225) v! #f (? . 225) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 226) c (? . 1))) . 28) ((? . 227) v! (q "Developing a Complete Software System") (? . 227) (? . 228) (? . 5) #f) ((c index-entry c (? . 138)) c (c (? . 137)) c (c (2 #f (? . 229))) c (? . 8)) ((c index-entry c (? . 35)) c (c (? . 230)) c (c (2 #f (? . 231))) c (? . 8)) ((c counter c (c (? . 13) c (? . 275) ? . 14)) . 19) ((? . 232) v! #f (? . 232) #f (? . 17) #f) ((? . 233) v! (q "Code Inspections, Systematically") (? . 233) (? . 80) (? . 17) #f) ((c index-entry c (? . 55)) c (c (? . 234)) c (c (2 #f (? . 235))) c (? . 8)) ((? . 237) v! #f (? . 237) #f (? . 48) #f) ((? . 238) v! (? . 239) (? . 238) (c 2 ? . 147) (? . 5) #f) ((? . 240) v! (? . 241) (? . 240) (c 4 ? . 212) (? . 17) #f) ((c counter c (c (? . 0) c (? . 278) c (? . 1))) . 14) ((? . 242) v! (? . 285) (? . 242) (c 5 ? . 212) (? . 17) #f) ((? . 244) v! #f (? . 244) #f (? . 17) #f) ((? . 245) v! (? . 246) (? . 245) (c 2 ? . 247) (? . 17) #f) ((c counter c (c (? . 0) c (? . 248) c (? . 1))) . 43) ((c counter c (c (? . 0) c (? . 249) c (? . 1))) . 54) ((c index-entry c (? . 289)) c (c (? . 250)) c (c (2 #f (? . 290))) c (? . 8)) ((? . 252) v! #f (? . 252) #f (? . 17) #f) ((? . 253) v! #f (? . 253) #f (? . 5) #f) ((c counter c (c (? . 13) c (? . 254) ? . 14)) . 8) ((? . 256) v! #f (? . 256) #f (? . 5) #f) ((? . 257) v! (q "The Death of Software,  The Life of Software") (? . 257) (c 1 ? . 258) (? . 259) #f) ((? . 260) v! (q "Clarity of Code") (? . 260) (c 18 ? . 36) (? . 17) #f) ((c index-entry c (? . 292)) c (c (? . 261)) c (c (2 #f (? . 293))) c (? . 8)) ((? . 263) v! #f (? . 263) #f (? . 259) #f) ((? . 264) v! #f (? . 264) #f (? . 17) #f) ((? . 265) v! #f (? . 265) #f (? . 48) #f) ((? . 267) v! #f (? . 267) #f (? . 17) #f) ((? . 268) v! (? . 310) (? . 268) (c 3 ? . 228) (? . 5) #f) ((? . 270) v! #f (? . 270) #f (? . 48) #f) ((c counter c (c (? . 0) c (? . 327) c (? . 1))) . 2) ((? . 272) v! #f (? . 272) #f (? . 17) #f) ((? . 274) v! #f (? . 274) #f (? . 17) #f) ((? . 276) v! #f (? . 276) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 277) c (? . 1))) . 25) ((? . 279) v! #f (? . 279) #f (? . 5) #f) ((? . 280) v! (q "Interface Inspections, Systematically") (? . 280) (? . 281) (? . 48) #f) ((? . 283) v! #f (? . 283) #f (? . 17) #f) ((c index-entry c (? . 242)) c (c (? . 284)) c (c (2 #f (? . 285))) c (? . 8)) ((c counter c (c (? . 0) c (? . 286) c (? . 1))) . 20) ((c counter c (c (? . 0) c (? . 287) c (? . 1))) . 16) ((c counter c (c (? . 0) c (? . 288) c (? . 1))) . 37) ((? . 289) v! (? . 290) (? . 289) (c 3 ? . 45) (? . 17) #f) ((? . 291) v! #f (? . 291) #f (? . 48) #f) ((? . 292) v! (? . 293) (? . 292) (c 6 ? . 45) (? . 17) #f) ((c counter c (c (? . 0) c (? . 311) c (? . 1))) . 44) ((? . 294) v! (c (2 smaller (q "Perspective"))) (? . 294) (? . 258) (? . 259) #t) ((c index-entry c (? . 173)) c (c (? . 295)) c (c (2 #f (? . 296))) c (? . 8)) ((? . 297) v! (q "The Nature of Software Development") (? . 297) (c 3 ? . 29) (? . 30) #f) ((c index-entry c (? . 177)) c (c (? . 298)) c (c (2 #f (? . 299))) c (? . 8)) ((c index-entry c (? . 329)) c (c (? . 300)) c (c (2 #f (? . 330))) c (? . 8)) ((c counter c (c (? . 0) c (? . 301) c (? . 1))) . 18) ((c index-entry c (? . 207)) c (c (? . 302)) c (c (2 #f (? . 303))) c (? . 8)) ((c index-entry c (? . 335)) c (q "Analysis: Understanding the Project's Purpose and Context") c (c (2 #f (? . 336))) c (? . 8)) ((c counter c (c (? . 0) c (? . 304) c (? . 1))) . 39) ((c counter c (c (? . 0) c (? . 305) c (? . 1))) . 46) ((? . 307) v! #f (? . 307) #f (? . 17) #f) ((c index-entry c (? . 359)) c (c (? . 308)) c (c (2 #f (? . 360))) c (? . 8)) ((c index-entry c (? . 268)) c (c (? . 309)) c (c (2 #f (? . 310))) c (? . 8)) ((? . 312) v! #f (? . 312) #f (? . 17) #f) ((? . 313) v! (? . 367) (? . 313) (c 2 ? . 212) (? . 17) #f) ((? . 314) v! (? . 315) (? . 314) (c 4 ? . 38) (? . 17) #f) ((? . 316) v! (q "Developing a Mind Set") (? . 316) (q #f #f #f) (? . 27) #f) ((c counter c (c (? . 13) c (? . 317) ? . 14)) . 16) ((? . 319) v! #f (? . 319) #f (? . 17) #f) ((? . 321) v! #f (? . 321) #f (? . 48) #f) ((? . 322) v! (q "Dear Instructor:") (? . 322) (q #f #f #f) (? . 27) #f) ((? . 323) v! (? . 324) (? . 323) (c 1 ? . 161) (? . 48) #f) ((? . 326) v! #f (? . 326) #f (? . 5) #f) ((? . 328) v! #f (? . 328) #f (? . 30) #f) ((? . 329) v! (? . 330) (? . 329) (c 3 ? . 51) (? . 5) #f) ((c index-entry c (? . 172)) c (c (? . 331)) c (c (2 #f (? . 332))) c (? . 8)) ((c counter c (c (? . 0) c (? . 333) c (? . 1))) . 27) ((c counter c (c (? . 0) c (? . 334) c (? . 1))) . 47) ((? . 335) v! (? . 336) (? . 335) (c 2 ? . 228) (? . 5) #f) ((? . 338) v! #f (? . 338) #f (? . 17) #f) ((c index-entry c (? . 211)) c (c (? . 339)) c (c (2 #f (? . 340))) c (? . 8)) ((? . 341) v! (q "AI") (? . 341) (q #f #f #f) (? . 143) #f) ((? . 342) v! (q "Why Inspections Matter Even If There is No Code") (? . 342) (? . 343) (? . 5) #f) ((? . 344) v! (q "Code Inspections, the Basics") (? . 344) (? . 212) (? . 17) #f) ((c counter c (c (? . 13) c (? . 345) ? . 14)) . 4) ((? . 346) v! (? . 347) (? . 346) (c 3 ? . 212) (? . 17) #f) ((? . 348) v! (? . 349) (? . 348) (c 3 ? . 247) (? . 17) #f) ((? . 350) v! (? . 351) (? . 350) (c 3 ? . 147) (? . 5) #f) ((c index-entry c (? . 198)) c (c (? . 352)) c (c (2 #f (? . 353))) c (? . 8)) ((? . 355) v! #f (? . 355) #f (? . 17) #f) ((c counter c (c (? . 0) c (? . 356) c (? . 1))) . 42) ((? . 358) v! #f (? . 358) #f (? . 17) #f) ((? . 359) v! (? . 360) (? . 359) (c 4 ? . 228) (? . 5) #f) ((c counter c (c (? . 13) c (? . 361) ? . 14)) . 2) ((? . 362) v! (? . 363) (? . 362) (c 4 ? . 45) (? . 17) #f) ((c counter c (c (? . 13) c (? . 364) ? . 14)) . 24) ((c counter c (c (? . 0) c (? . 365) c (? . 1))) . 5) ((c index-entry c (? . 313)) c (c (? . 366)) c (c (2 #f (? . 367))) c (? . 8)) ((? . 369) v! #f (? . 369) #f (? . 17) #f) ((c counter c (c (? . 13) c (? . 370) ? . 14)) . 15) ((c counter c (c (? . 0) c (? . 371) c (? . 1))) . 45) ((? . 372) v! (q "The Very Basics") (? . 372) (? . 247) (? . 17) #f) ((? . 374) v! #f (? . 374) #f (? . 5) #f) ((c index-entry c (? . 88)) c (c (? . 375)) c (c (2 #f (? . 376))) c (? . 8))))