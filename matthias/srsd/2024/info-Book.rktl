((3) 3 (((lib "scribble/decode-struct.rkt") . deserialize-info:part-index-desc-v0) ((lib "scribble/render-struct.rkt") . deserialize-info:mobile-root-v0) ((lib "scribble/core.rkt") . deserialize-info:element-v0)) 319 ((q part "ch:lab") (q part "sec:meth-example") (c (u . "IV")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_three.html" . unix) (q part "ch:comments") "figure" (c counter c (c (? . 5) c (? . 53))) "value" "exercise" (q "value") (c counter c (c (? . 5) c (? . 134))) "fig:sa-client-server" (c counter c (c (? . 5) c (? . 11))) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_four.html" . unix) "Inspecting Code for Coding Flaws" "A Short Note on Conditionals and Loops" (0) (c counter c (c (? . 5) c (? . 157))) "From Information to Classes via Doodling" "Inspecting" (c part c (? . 19)) (c 19 ? . 2) (q part "ch:systematic") (c 18 ? . 2) (q part "ch:3review") (q part "ch:pair") (c (u . "II")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_two.html" . unix) (q part "sec:context") (c counter c (c (? . 5) c (? . 197))) (q part "Inspecting_Code_for_Coding_Flaws") (c (? . 14)) (c counter c (c (? . 8) c (? . 138))) "The Interface is the Common Ontology" "Documents: README, Before the Coding Begins" "Reacting to a Code Inspection" "fig:game-plan-fixed" (c counter c (c (? . 5) c (? . 36))) (c counter c (c (? . 5) c (? . 296))) (c tech c (? . 130)) (c counter c (c (? . 8) c (? . 100))) "Abstracting with Functions" (q part "sec:ontology") (c (? . 33)) (q part "sec:fun-example") (q part "part:preface") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_preface.html" . unix) (q part "part:two") (c counter c (c (? . 5) c (? . 115))) (c counter c (c (? . 5) c (? . 154))) (q part "ch:socially-responsible") (q part "ch:project") (c (u . "III")) "fig:branches-uniform" "A General Guide to Code Inspections" (c counter c (c (? . 5) c (? . 269))) (q part "sec:fun-vs-meth") (q part "Structured_Information__Don_t_Use_Strings_to_Represent_It") "fig:code-bad-py" (c counter c (c (? . 5) c (? . 58))) (q part "sec:names") "Pair Programming" (c (? . 61)) "From Information to Data Representations, And Back" (q part "sec:doodle") (c (? . 18)) (c 1 ? . 23) "Developing Data Representations for Composition" "fig:board-diagram" (c counter c (c (? . 5) c (? . 68))) (c counter c (c (? . 5) c (? . 106))) (c counter c (c (? . 8) c (? . 304))) "Abstracting with Classes" "Designing Methods, Systematically" (q part "Inspecting_Code_for_Design_Mistakes") (c 17 ? . 2) (q part "ch:sw-arch") (q part "ch:inspect") (q part "this") "Ways to Proceed" (q part "srsd") (c part c (u . "chap:part:preface")) "fig:player-rest" (c counter c (c (? . 5) c (? . 82))) (q part "ackn") "fig:data-bad" (c counter c (c (? . 5) c (? . 85))) "Presenting" (q part "ch:project-idea") (c counter c (c (? . 5) c (? . 196))) "Methods vs Functions" (c (? . 90)) (q part "ch:inspect-design") (c counter c (c (? . 5) c (? . 170))) "ex:design-alternative" (c counter c (c (? . 8) c (? . 94))) (q part "Information_that_is_Considered_Atomic") "Inspecting Systematically Designed Code" (c (? . 97)) (c counter c (c (? . 5) c (? . 114))) "ex:tiny3" "Information that is Considered Atomic" (c (? . 101)) (q part "Inspecting_Code_for_Errors_and_Test_Coverage_Problems") "ex:design-inspection-2" (c counter c (c (? . 8) c (? . 104))) "fig:info-data" (c counter c (c (? . 5) c (? . 309))) (q part "sec:push-back") "ex:tiny1" (c counter c (c (? . 8) c (? . 109))) (q part "sec:size-of") (c 16 ? . 2) (c counter c (c (? . 8) c (? . 213))) "fig:uncompose" "fig:xyz" "Structured Information: Use Structs, Records, Objects" (c part c (u . "chap:part:old")) "fig:readme-dynamic" (c counter c (c (? . 5) c (? . 118))) (c counter c (c (? . 8) c (? . 282))) "Choosing from Several Alternatives" (q part "ch:overview") (q part "ch:life") (c (u . "I")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_one.html" . unix) (c counter c (c (? . 8) c (? . 295))) "ex:user-responsibility" (c counter c (c (? . 8) c (? . 127))) (c (? . 19)) "length" (q part "ch:inspect-summary") (c (? . 54)) (c 4 ? . 21) "fig:system-boundary" (c counter c (c (? . 5) c (? . 201))) "fig:sa-client-server-x" (c counter c (c (? . 5) c (? . 136))) "ex:data-interp" (q part "sec:data-design") "fig:inspection" (c counter c (c (? . 5) c (? . 140))) "Designing Functions, Systematically" (q part "sec:identify-components") (c 8 ? . 52) "fig:fun-seq" (c counter c (c (? . 5) c (? . 145))) "ex:naming" (c counter c (c (? . 8) c (? . 147))) (c counter c (c (? . 5) c (? . 229))) "ex:asts" (c counter c (c (? . 8) c (? . 150))) "fig:components" (c counter c (c (? . 5) c (? . 152))) "fig:inspection-2-memo" (q part "ch:design-alt") (q part "sec:srsd-sys-good") "fig:factored" "fig:inspection-design-mistake" (c counter c (c (? . 5) c (? . 158))) "fig:contract1" (c counter c (c (? . 5) c (? . 160))) "Pushing Back During a Code Inspection" (c (? . 162)) (c counter c (c (? . 5) c (? . 195))) (q part "ch:ego") (q part "part:postlude") (c counter c (c (? . 8) c (? . 281))) (q part "ch:present") "README Files" "fig:sample-memo" (q part "Structured_Information__Use_Structs__Records__Objects") (c (? . 116)) (q part "ch:abstraction") (q part "Choosing_from_Several_Alternatives") (c (? . 121)) (q part "part:one") "A Second Look at the Tiny Case Study" (c (? . 177)) (q part "sec:method-design") (c (? . 73)) (q part "sec:documents") (c (? . 34)) (q part "ch:3art") "ex:protocol" (c counter c (c (? . 8) c (? . 184))) "ex:thermostat-data" (c counter c (c (? . 8) c (? . 186))) (c counter c (c (? . 8) c (? . 244))) (q part "sec:data-design2") (c (? . 67)) "The Size of Functions and Methods" (c (? . 191)) "Names Matter" (c (? . 193)) "fig:abstraction-diagram" "fig:inspection-error" "fig:compose-meth" "fig:code-good-outline" (c counter c (c (? . 5) c (? . 198))) "Favor Functions, Favor Immutability" "fig:sa-mvc" "Planning: How the Construction Proceeds" "Synthesis: Discovering Components" (c (? . 203)) "fig:compose" (c counter c (c (? . 5) c (? . 205))) (q part "A_Code_Inspection_Memo") (c counter c (c (? . 5) c (? . 230))) (q part "sec:function-design") (c (? . 142)) (q "Structured Information: Don" rsquo "t Use Strings to Represent It") (q part "skills") "ex:memo2" "ex:java-list" (c counter c (c (? . 8) c (? . 214))) (c counter c (c (? . 5) c (? . 260))) "fig:oo-seq" (c counter c (c (? . 5) c (? . 217))) (q part "dear") "ex:class-abstract" (c counter c (c (? . 8) c (? . 220))) "fig:use-cases" (c counter c (c (? . 5) c (? . 222))) (q part "ch:managing") "fig:reviews" (c counter c (c (? . 5) c (? . 225))) "The Labyrinth Game: A Problem Statement" (c (? . 227)) "fig:code-good-aux" "fig:data-rep-good" (q part "sec:project-facets") (q "Analysis: Understanding the Project" rsquo "s Purpose and Context") "ex:data-rep" (c counter c (c (? . 8) c (? . 233))) "Inspecting Code for Design Mistakes" (c (? . 235)) (q part "ch:why-design-inspection") (c 13 ? . 52) (c counter c (c (? . 5) c (? . 285))) (q part "sec:class-abstraction") (c (? . 72)) (c 21 ? . 2) (q part "ch:inspect-code") "ex:organize" (q part "sec:function-abstraction") (c (? . 41)) (q part "Reacting_to_a_Code_Inspection") (c (? . 35)) "fig:player-state" (c counter c (c (? . 5) c (? . 249))) (q part "sec:conditions") (c (? . 15)) (q part "README_Files") (c (? . 169)) (q part "ch:api") "Atomic vs Composite: A Tiny Case Study" (c (? . 256)) "fig:code-good" (c counter c (c (? . 5) c (? . 258))) "fig:add1-diagram" "ex:named-constants" (c counter c (c (? . 8) c (? . 261))) "fig:pc" (c counter c (c (? . 5) c (? . 263))) "ex:game-state" (c counter c (c (? . 8) c (? . 265))) (c part c (? . 87)) (c (? . 87)) "fig:layers" "fig:sa-pipes" (c counter c (c (? . 5) c (? . 270))) "fig:sa-client-server-xyz" (c counter c (c (? . 5) c (? . 272))) (c part c (u . "chap:part:postlude")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_postlude.html" . unix) (q part "sec:project-plan") (c (? . 202)) (q part "ch:sample-project") (q part "part:old") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/part_old.html" . unix) "ex:design-inspection" "ex:reliability" "Inspecting Code for Errors and Test Coverage Problems" (c (? . 283)) "fig:use-cases++" (q part "From_Information_to_Data_Representations__And_Back") (c (? . 63)) (q part "sec:project-proceed") (c (? . 79)) (q part "part:four") "Developing Data Representations for Information" (c (? . 291)) "fig:game-plan" (c counter c (c (? . 5) c (? . 293))) "ex:purpose1" "fig:system-analysis" "A Code Inspection Memo" (c (? . 297)) "fig:class-abstraction" (c counter c (c (? . 5) c (? . 299))) "fig:monolith" (c counter c (c (? . 5) c (? . 301))) (q part "ch:modules") "ex:merge" (q part "Favor_Functions__Favor_Immutability") (c (? . 200)) (c 6 ? . 23) (q part "part:three") "fig:gs-diagram" "Presenting Systematically Designed Code" (c (? . 310)) (q part "ch:basics") "fig:waterfall" (c counter c (c (? . 5) c (? . 313))) "Why Systematic Design is Socially Responsible" (c (? . 315)) "ex:tiny2" (c counter c (c (? . 8) c (? . 317)))) () (c (1 #f) h ! (equal) ((? . 0) v! (? . 228) (? . 0) (c 1 ? . 21) (? . 3) #f) ((c counter c (c (? . 5) c (? . 258) c (? . 7))) . 38) ((c counter c (c (? . 8) c (? . 233) ? . 9)) . 14) ((? . 1) v! (? . 178) (? . 1) (c 7 ? . 23) (? . 3) #f) ((? . 4) v! (q "Comments are Needed in a Small Number of Places") (? . 4) (c 15 ? . 2) (? . 3) #f) ((? . 6) v! #f (? . 6) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 136) c (? . 7))) . 12) ((c counter c (c (? . 8) c (? . 104) ? . 9)) . 6) ((c counter c (c (? . 5) c (? . 68) c (? . 7))) . 37) ((c counter c (c (? . 5) c (? . 11) c (? . 7))) . 11) ((? . 10) v! #f (? . 10) #f (? . 13) #f) ((? . 12) v! #f (? . 12) #f (? . 13) #f) ((c index-entry c (? . 30)) c (c (? . 14)) c (c (2 #f (? . 31))) c (? . 16)) ((c index-entry c (? . 251)) c (c (? . 15)) c (c (2 #f (? . 252))) c (? . 16)) ((c counter c (c (? . 5) c (? . 85) c (? . 7))) . 40) ((? . 17) v! #f (? . 17) #f (? . 3) #f) ((c index-entry c (? . 64)) c (c (? . 18)) c (c (2 #f (? . 65))) c (? . 16)) ((? . 20) v! (? . 129) (? . 20) (c 3 ? . 133) (? . 3) #f) ((c counter c (c (? . 5) c (? . 217) c (? . 7))) . 19) ((? . 22) v! (q "Systematic Design") (? . 22) (? . 23) (? . 3) #f) ((? . 24) v! (q "Software Inspections") (? . 24) (c 6 ? . 26) (? . 27) #f) ((c counter c (c (? . 8) c (? . 317) ? . 9)) . 19) ((? . 25) v! (? . 62) (? . 25) (c 5 ? . 26) (? . 27) #f) ((? . 28) v! (q "The Context, for the Instructor") (? . 28) (q #f #f #f) (? . 46) #f) ((? . 29) v! #f (? . 29) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 186) ? . 9)) . 9) ((c counter c (c (? . 5) c (? . 36) c (? . 7))) . 16) ((? . 30) v! (? . 31) (? . 30) (c 1 ? . 75) (? . 3) #f) ((? . 32) v! #f (? . 32) #f (? . 3) #f) ((c index-entry c (? . 42)) c (c (? . 33)) c (c (2 #f (? . 43))) c (? . 16)) ((c index-entry c (? . 181)) c (c (? . 34)) c (c (2 #f (? . 182))) c (? . 16)) ((c index-entry c (? . 247)) c (c (? . 35)) c (c (2 #f (? . 248))) c (? . 16)) ((? . 37) v! #f (? . 37) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 158) c (? . 7))) . 28) ((c counter c (c (? . 5) c (? . 270) c (? . 7))) . 9) ((? . 38) v! #f (? . 38) #f (? . 13) #f) ((? . 39) v! #f (? . 39) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 82) c (? . 7))) . 17) ((? . 40) v! #f (? . 40) #f (? . 3) #f) ((c index-entry c (? . 245)) c (c (? . 41)) c (c (2 #f (? . 246))) c (? . 16)) ((? . 42) v! (? . 43) (? . 42) (c 1 ? . 238) (? . 13) #f) ((? . 44) v! (? . 257) (? . 44) (c 5 ? . 23) (? . 3) #f) ((? . 45) v! (q "Prelude") (? . 45) (q #f) (? . 46) #t) ((? . 47) v! (q "Principles") (? . 47) (? . 26) (? . 27) #t) ((? . 48) v! #f (? . 48) #f (? . 3) #f) ((? . 49) v! #f (? . 49) #f (? . 3) #f) ((? . 50) v! (q "Are You Socially Responsible?") (? . 50) (c 2 ? . 124) (? . 125) #f) ((c counter c (c (? . 8) c (? . 127) ? . 9)) . 1) ((c counter c (c (? . 8) c (? . 109) ? . 9)) . 18) ((? . 51) v! (q "Software Systems") (? . 51) (c 7 ? . 52) (? . 13) #f) ((c counter c (c (? . 5) c (? . 53) c (? . 7))) . 23) ((c index-entry c (? . 131)) c (c (? . 54)) c (c (2 #f (? . 132))) c (? . 16)) ((? . 55) v! #f (? . 55) #f (? . 13) #f) ((? . 56) v! (? . 91) (? . 56) (c 3 ? . 23) (? . 3) #f) ((c counter c (c (? . 5) c (? . 198) c (? . 7))) . 36) ((c counter c (c (? . 8) c (? . 94) ? . 9)) . 7) ((? . 57) v! (? . 211) (? . 57) (c 2 ? . 66) (? . 3) #f) ((c counter c (c (? . 5) c (? . 58) c (? . 7))) . 41) ((? . 59) v! #f (? . 59) #f (? . 3) #f) ((? . 60) v! (? . 194) (? . 60) (c 1 ? . 112) (? . 3) #f) ((c counter c (c (? . 8) c (? . 147) ? . 9)) . 11) ((c index-entry c (? . 25)) c (c (? . 61)) c (c (2 #f (? . 62))) c (? . 16)) ((c index-entry c (? . 286)) c (c (? . 63)) c (c (2 #f (? . 287))) c (? . 16)) ((? . 64) v! (? . 65) (? . 64) (c 5 ? . 66) (? . 3) #f) ((c index-entry c (? . 189)) c (c (? . 67)) c (c (2 #f (? . 190))) c (? . 16)) ((? . 69) v! #f (? . 69) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 301) c (? . 7))) . 21) ((? . 70) v! #f (? . 70) #f (? . 3) #f) ((? . 71) v! #f (? . 71) #f (? . 3) #f) ((c index-entry c (? . 240)) c (c (? . 72)) c (c (2 #f (? . 241))) c (? . 16)) ((c index-entry c (? . 179)) c (c (? . 73)) c (c (2 #f (? . 180))) c (? . 16)) ((? . 74) v! (? . 236) (? . 74) (c 6 ? . 75) (? . 3) #f) ((? . 76) v! (q "Software Architecture") (? . 76) (c 9 ? . 52) (? . 13) #f) ((? . 77) v! (? . 98) (? . 77) (c 3 ? . 21) (? . 3) #f) ((c counter c (c (? . 5) c (? . 293) c (? . 7))) . 14) ((? . 78) v! (q "This Book and Its Parts") (? . 78) (q #f #f #f) (? . 46) #f) ((c index-entry c (? . 288)) c (c (? . 79)) c (c (2 #f (? . 289))) c (? . 16)) ((? . 80) v! (c "Socially Responsible " c (2 newline "") q " Software Development") (? . 80) () (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2024/Book/index.html" . unix) #t) ((? . 81) v! () (? . 81) (q #f #f) (? . 46) #f) ((? . 83) v! #f (? . 83) #f (? . 13) #f) ((? . 84) v! (q "Acknowledgments") (? . 84) (q #f #f #f) (? . 46) #f) ((? . 86) v! #f (? . 86) #f (? . 3) #f) ((c index-entry c (? . 267)) c (c (? . 87)) c (c (2 #f (? . 268))) c (? . 16)) ((c counter c (c (? . 5) c (? . 160) c (? . 7))) . 46) ((? . 88) v! (q "Developing a Complete Software System") (? . 88) (? . 144) (? . 13) #f) ((c counter c (c (? . 5) c (? . 118) c (? . 7))) . 43) ((? . 89) v! #f (? . 89) #f (? . 3) #f) ((c index-entry c (? . 56)) c (c (? . 90)) c (c (2 #f (? . 91))) c (? . 16)) ((c counter c (c (? . 5) c (? . 299) c (? . 7))) . 44) ((c counter c (c (? . 8) c (? . 150) ? . 9)) . 16) ((? . 92) v! (q "Code Inspections, Systematically") (? . 92) (? . 21) (? . 3) #f) ((? . 93) v! #f (? . 93) #f (? . 3) #f) ((? . 95) v! #f (? . 95) #f (? . 13) #f) ((? . 96) v! (? . 102) (? . 96) (c 1 ? . 66) (? . 3) #f) ((c index-entry c (? . 77)) c (c (? . 97)) c (c (2 #f (? . 98))) c (? . 16)) ((? . 99) v! #f (? . 99) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 100) ? . 9)) . 20) ((c index-entry c (? . 96)) c (c (? . 101)) c (c (2 #f (? . 102))) c (? . 16)) ((? . 103) v! (? . 284) (? . 103) (c 4 ? . 75) (? . 3) #f) ((? . 105) v! #f (? . 105) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 152) c (? . 7))) . 13) ((c counter c (c (? . 5) c (? . 106) c (? . 7))) . 29) ((? . 107) v! #f (? . 107) #f (? . 3) #f) ((? . 108) v! (? . 163) (? . 108) (c 5 ? . 75) (? . 3) #f) ((? . 110) v! #f (? . 110) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 140) c (? . 7))) . 24) ((? . 111) v! (? . 192) (? . 111) (c 2 ? . 112) (? . 3) #f) ((? . 113) v! #f (? . 113) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 114) c (? . 7))) . 31) ((c counter c (c (? . 5) c (? . 115) c (? . 7))) . 42) ((c index-entry c (? . 171)) c (c (? . 116)) c (c (2 #f (? . 172))) c (? . 16)) ((? . 117) v! () (? . 117) (q #f #f) (? . 280) #f) ((? . 119) v! #f (? . 119) #f (? . 3) #f) ((? . 120) v! #f (? . 120) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 184) ? . 9)) . 8) ((c counter c (c (? . 5) c (? . 313) c (? . 7))) . 3) ((c index-entry c (? . 174)) c (c (? . 121)) c (c (2 #f (? . 175))) c (? . 16)) ((? . 122) v! (q "Clarity of Code") (? . 122) (c 14 ? . 2) (? . 3) #f) ((? . 123) v! (q "The Death of Software,  The Life of Software") (? . 123) (c 1 ? . 124) (? . 125) #f) ((? . 126) v! #f (? . 126) #f (? . 3) #f) ((? . 128) v! #f (? . 128) #f (? . 125) #f) ((c index-entry c (? . 20)) c (c (? . 19)) c (c (2 #f (? . 129))) c (? . 16)) ((c index-entry c (? . 39)) c (c (? . 130)) c (c (2 italic (? . 130))) q tech) ((c counter c (c (? . 5) c (? . 145) c (? . 7))) . 20) ((? . 131) v! (? . 132) (? . 131) (? . 133) (? . 3) #f) ((c counter c (c (? . 5) c (? . 134) c (? . 7))) . 5) ((? . 135) v! #f (? . 135) #f (? . 13) #f) ((? . 137) v! #f (? . 137) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 138) ? . 9)) . 15) ((? . 139) v! (? . 292) (? . 139) (? . 66) (? . 3) #f) ((? . 141) v! #f (? . 141) #f (? . 3) #f) ((c index-entry c (? . 209)) c (c (? . 142)) c (c (2 #f (? . 210))) c (? . 16)) ((? . 143) v! (? . 204) (? . 143) (c 3 ? . 144) (? . 13) #f) ((? . 146) v! #f (? . 146) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 225) c (? . 7))) . 2) ((? . 148) v! #f (? . 148) #f (? . 3) #f) ((? . 149) v! #f (? . 149) #f (? . 3) #f) ((? . 151) v! #f (? . 151) #f (? . 3) #f) ((? . 153) v! #f (? . 153) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 154) c (? . 7))) . 26) ((? . 155) v! (q "Inspecting Component Designs") (? . 155) (c 12 ? . 52) (? . 13) #f) ((? . 156) v! (? . 316) (? . 156) (c 8 ? . 23) (? . 3) #f) ((c counter c (c (? . 5) c (? . 157) c (? . 7))) . 22) ((? . 159) v! #f (? . 159) #f (? . 3) #f) ((? . 161) v! #f (? . 161) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 214) ? . 9)) . 17) ((c index-entry c (? . 108)) c (c (? . 162)) c (c (2 #f (? . 163))) c (? . 16)) ((? . 164) v! #f (? . 164) #f (? . 3) #f) ((? . 165) v! (q "Egoless Programming") (? . 165) (c 4 ? . 26) (? . 27) #f) ((c counter c (c (? . 5) c (? . 263) c (? . 7))) . 1) ((? . 166) v! (q "Postlude") (? . 166) (q #f) (? . 275) #t) ((c counter c (c (? . 5) c (? . 272) c (? . 7))) . 15) ((c counter c (c (? . 5) c (? . 249) c (? . 7))) . 18) ((? . 167) v! #f (? . 167) #f (? . 13) #f) ((? . 168) v! (? . 311) (? . 168) (c 2 ? . 21) (? . 3) #f) ((c index-entry c (? . 253)) c (c (? . 169)) c (c (2 #f (? . 254))) c (? . 16)) ((c counter c (c (? . 5) c (? . 170) c (? . 7))) . 25) ((? . 171) v! (? . 172) (? . 171) (c 3 ? . 66) (? . 3) #f) ((? . 173) v! (q "Systematic Abstraction") (? . 173) (? . 242) (? . 3) #f) ((? . 174) v! (? . 175) (? . 174) (c 6 ? . 66) (? . 3) #f) ((c counter c (c (? . 5) c (? . 205) c (? . 7))) . 32) ((? . 176) v! (q "Perspective") (? . 176) (? . 124) (? . 125) #t) ((c index-entry c (? . 1)) c (c (? . 177)) c (c (2 #f (? . 178))) c (? . 16)) ((? . 179) v! (? . 180) (? . 179) (? . 307) (? . 3) #f) ((? . 181) v! (? . 182) (? . 181) (c 5 ? . 144) (? . 13) #f) ((? . 183) v! (q "The Nature of Software Development") (? . 183) (c 3 ? . 26) (? . 27) #f) ((? . 185) v! #f (? . 185) #f (? . 13) #f) ((? . 187) v! #f (? . 187) #f (? . 3) #f) ((? . 188) v! #f (? . 188) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 261) ? . 9)) . 10) ((? . 189) v! (? . 190) (? . 189) (c 2 ? . 23) (? . 3) #f) ((c counter c (c (? . 8) c (? . 220) ? . 9)) . 22) ((c counter c (c (? . 5) c (? . 222) c (? . 7))) . 6) ((c index-entry c (? . 111)) c (c (? . 191)) c (c (2 #f (? . 192))) c (? . 16)) ((c index-entry c (? . 60)) c (c (? . 193)) c (c (2 #f (? . 194))) c (? . 16)) ((c counter c (c (? . 5) c (? . 195) c (? . 7))) . 45) ((c index-entry c (? . 231)) c (q "Analysis: Understanding the Project's Purpose and Context") c (c (2 #f (? . 232))) c (? . 16)) ((c counter c (c (? . 5) c (? . 196) c (? . 7))) . 27) ((c counter c (c (? . 5) c (? . 197) c (? . 7))) . 34) ((? . 199) v! #f (? . 199) #f (? . 3) #f) ((c index-entry c (? . 305)) c (c (? . 200)) c (c (2 #f (? . 306))) c (? . 16)) ((c counter c (c (? . 5) c (? . 201) c (? . 7))) . 10) ((c index-entry c (? . 276)) c (c (? . 202)) c (c (2 #f (? . 277))) c (? . 16)) ((c index-entry c (? . 143)) c (c (? . 203)) c (c (2 #f (? . 204))) c (? . 16)) ((? . 206) v! #f (? . 206) #f (? . 3) #f) ((? . 207) v! (? . 298) (? . 207) (c 2 ? . 75) (? . 3) #f) ((? . 208) v! #f (? . 208) #f (? . 3) #f) ((? . 209) v! (? . 210) (? . 209) (c 4 ? . 23) (? . 3) #f) ((c index-entry c (? . 57)) c (q "Structured Information: Don't Use Strings to Represent It") c (c (2 #f (? . 211))) c (? . 16)) ((? . 212) v! (q "Developing a Mind Set") (? . 212) (q #f #f #f) (? . 46) #f) ((c counter c (c (? . 8) c (? . 213) ? . 9)) . 13) ((? . 215) v! #f (? . 215) #f (? . 3) #f) ((? . 216) v! #f (? . 216) #f (? . 3) #f) ((? . 218) v! #f (? . 218) #f (? . 13) #f) ((? . 219) v! (q "Dear Instructor:") (? . 219) (q #f #f #f) (? . 46) #f) ((? . 221) v! #f (? . 221) #f (? . 3) #f) ((? . 223) v! #f (? . 223) #f (? . 13) #f) ((? . 224) v! (q "Inspecting the Plan") (? . 224) (c 11 ? . 52) (? . 13) #f) ((? . 226) v! #f (? . 226) #f (? . 27) #f) ((c index-entry c (? . 0)) c (c (? . 227)) c (c (2 #f (? . 228))) c (? . 16)) ((c counter c (c (? . 5) c (? . 229) c (? . 7))) . 39) ((c counter c (c (? . 5) c (? . 230) c (? . 7))) . 35) ((? . 231) v! (? . 232) (? . 231) (c 2 ? . 144) (? . 13) #f) ((? . 234) v! #f (? . 234) #f (? . 3) #f) ((c index-entry c (? . 74)) c (c (? . 235)) c (c (2 #f (? . 236))) c (? . 16)) ((? . 237) v! (q "Why Inspections Matter Even If There is No Code") (? . 237) (? . 238) (? . 13) #f) ((? . 239) v! #f (? . 239) #f (? . 13) #f) ((? . 240) v! (? . 241) (? . 240) (c 2 ? . 242) (? . 3) #f) ((? . 243) v! (q "Code Inspections, the Basics") (? . 243) (? . 75) (? . 3) #f) ((c counter c (c (? . 8) c (? . 244) ? . 9)) . 3) ((? . 245) v! (? . 246) (? . 245) (c 1 ? . 242) (? . 3) #f) ((? . 247) v! (? . 248) (? . 247) (c 3 ? . 75) (? . 3) #f) ((? . 250) v! #f (? . 250) #f (? . 13) #f) ((? . 251) v! (? . 252) (? . 251) (c 3 ? . 112) (? . 3) #f) ((? . 253) v! (? . 254) (? . 253) (c 1 ? . 133) (? . 3) #f) ((? . 255) v! (q "Module and API Design") (? . 255) (c 22 ? . 2) (? . 3) #f) ((c index-entry c (? . 44)) c (c (? . 256)) c (c (2 #f (? . 257))) c (? . 16)) ((? . 259) v! #f (? . 259) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 265) ? . 9)) . 4) ((c counter c (c (? . 5) c (? . 260) c (? . 7))) . 30) ((? . 262) v! #f (? . 262) #f (? . 3) #f) ((? . 264) v! #f (? . 264) #f (? . 46) #f) ((? . 266) v! #f (? . 266) #f (? . 13) #f) ((? . 267) v! (? . 268) (? . 267) (c 2 ? . 133) (? . 3) #f) ((c counter c (c (? . 5) c (? . 269) c (? . 7))) . 8) ((? . 271) v! #f (? . 271) #f (? . 13) #f) ((? . 273) v! #f (? . 273) #f (? . 13) #f) ((? . 274) v! () (? . 274) (q #f #f) (? . 275) #f) ((? . 276) v! (? . 277) (? . 276) (c 4 ? . 144) (? . 13) #f) ((? . 278) v! (q "A Sample Project: Analysis, Discovery, Planning") (? . 278) (c 10 ? . 52) (? . 13) #f) ((? . 279) v! (q "Old Material") (? . 279) (q #f) (? . 280) #t) ((c counter c (c (? . 8) c (? . 281) ? . 9)) . 5) ((c counter c (c (? . 8) c (? . 282) ? . 9)) . 2) ((c index-entry c (? . 103)) c (c (? . 283)) c (c (2 #f (? . 284))) c (? . 16)) ((c counter c (c (? . 5) c (? . 285) c (? . 7))) . 7) ((? . 286) v! (? . 287) (? . 286) (c 4 ? . 66) (? . 3) #f) ((? . 288) v! (? . 289) (? . 288) (c 1 ? . 144) (? . 13) #f) ((? . 290) v! (q "Project") (? . 290) (? . 52) (? . 13) #t) ((c index-entry c (? . 139)) c (c (? . 291)) c (c (2 #f (? . 292))) c (? . 16)) ((? . 294) v! #f (? . 294) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 295) ? . 9)) . 21) ((c counter c (c (? . 5) c (? . 296) c (? . 7))) . 4) ((c index-entry c (? . 207)) c (c (? . 297)) c (c (2 #f (? . 298))) c (? . 16)) ((? . 300) v! #f (? . 300) #f (? . 3) #f) ((? . 302) v! #f (? . 302) #f (? . 3) #f) ((? . 303) v! (q "Encapsulation and Abstraction") (? . 303) (c 20 ? . 2) (? . 3) #f) ((c counter c (c (? . 8) c (? . 304) ? . 9)) . 12) ((? . 305) v! (? . 306) (? . 305) (c 1 ? . 307) (? . 3) #f) ((? . 308) v! (q "Programming") (? . 308) (? . 2) (? . 3) #t) ((c counter c (c (? . 5) c (? . 309) c (? . 7))) . 33) ((c index-entry c (? . 168)) c (c (? . 310)) c (c (2 #f (? . 311))) c (? . 16)) ((? . 312) v! (q "The Very Basics") (? . 312) (? . 112) (? . 3) #f) ((? . 314) v! #f (? . 314) #f (? . 13) #f) ((c index-entry c (? . 156)) c (c (? . 315)) c (c (2 #f (? . 316))) c (? . 16)) ((? . 318) v! #f (? . 318) #f (? . 3) #f)))