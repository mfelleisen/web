((3) 3 (((lib "scribble/decode-struct.rkt") . deserialize-info:part-index-desc-v0) ((lib "scribble/render-struct.rkt") . deserialize-info:mobile-root-v0) ((lib "scribble/core.rkt") . deserialize-info:element-v0)) 307 ((q part "ch:lab") (q part "sec:meth-example") (c (u . "IV")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_three.html" . unix) (q part "ch:comments") "figure" (c counter c (c (? . 5) c (? . 55))) "value" "exercise" (q "value") (c counter c (c (? . 5) c (? . 128))) "fig:sa-client-server" (c counter c (c (? . 5) c (? . 11))) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_four.html" . unix) "Inspecting Code for Coding Flaws" "A Short Note on Conditionals and Loops" (0) (c counter c (c (? . 5) c (? . 151))) "From Information to Classes via Doodling" (q part "Pushing_Back_During_a_Code_Inspection") (q part "ch:systematic") (c 18 ? . 2) (q part "ch:3review") (q part "ch:pair") (c (u . "II")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_two.html" . unix) (q part "sec:context") (c counter c (c (? . 5) c (? . 188))) (q part "Inspecting_Code_for_Coding_Flaws") (c (? . 14)) (c 17 ? . 2) (c counter c (c (? . 8) c (? . 133))) "The Interface is the Common Ontology" "Documents: README, Before the Coding Begins" "Reacting to a Code Inspection" "fig:game-plan-fixed" (c counter c (c (? . 5) c (? . 35))) (c counter c (c (? . 5) c (? . 284))) (c tech c (? . 125)) (c counter c (c (? . 8) c (? . 100))) "Abstracting with Functions" (q part "sec:ontology") (c (? . 32)) (q part "sec:fun-example") (q part "part:preface") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_preface.html" . unix) (q part "part:two") (c counter c (c (? . 5) c (? . 114))) (q part "_Structured_Information__Don_t_Use_Strings_to_Represent_It") (q " Structured Information: Don" rsquo "t Use Strings to Represent It") (c counter c (c (? . 5) c (? . 148))) (q part "ch:socially-responsible") (q part "ch:project") (c (u . "III")) "Inspection Guide" "fig:branches-uniform" (c counter c (c (? . 5) c (? . 257))) (q part "sec:fun-vs-meth") (q part "sec:names") "fig:code-bad-py" (c counter c (c (? . 5) c (? . 59))) "Pair Programming" (c (? . 61)) "From Information to Data Representations, And Back" "Developing Data Representations for Composition" (q part "sec:doodle") (c (? . 18)) (c 1 ? . 21) "fig:board-diagram" (c counter c (c (? . 5) c (? . 68))) "Structured Information" (c counter c (c (? . 5) c (? . 106))) (c counter c (c (? . 8) c (? . 292))) "Abstracting with Classes" "Designing Methods, Systematically" (q part "Inspecting_Code_for_Design_Mistakes") (q part "ch:sw-arch") (q part "ch:inspect") (c 19 ? . 2) (q part "this") "Ways to Proceed" (q part "srsd") (c part c (u . "chap:part:preface")) "fig:player-rest" (c counter c (c (? . 5) c (? . 83))) (q part "ackn") "fig:data-bad" (c counter c (c (? . 5) c (? . 86))) (q part "ch:project-idea") (c counter c (c (? . 5) c (? . 187))) "Methods vs Functions" (c (? . 90)) (q part "ch:inspect-design") (c counter c (c (? . 5) c (? . 163))) "ex:design-alternative" (c counter c (c (? . 8) c (? . 94))) (q part "Information_that_is_Considered_Atomic") "Inspecting Systematically Designed Code" (c (? . 97)) (c counter c (c (? . 5) c (? . 113))) "ex:tiny3" "Information that is Considered Atomic" (c (? . 101)) (q part "Inspecting_Code_for_Errors_and_Test_Coverage_Problems") "ex:design-inspection-2" (c counter c (c (? . 8) c (? . 104))) "fig:info-data" (c counter c (c (? . 5) c (? . 297))) "ex:tiny1" (c counter c (c (? . 8) c (? . 108))) (q part "sec:size-of") (c 16 ? . 2) (c counter c (c (? . 8) c (? . 205))) "fig:uncompose" "fig:xyz" (c part c (u . "chap:part:old")) (c counter c (c (? . 8) c (? . 270))) "Choosing from Several Alternatives" (q part "ch:overview") (q part "ch:life") (c (u . "I")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_one.html" . unix) (c counter c (c (? . 8) c (? . 283))) "ex:user-responsibility" (c counter c (c (? . 8) c (? . 123))) "length" (q part "ch:inspect-summary") (c (? . 54)) "fig:system-boundary" (c counter c (c (? . 5) c (? . 192))) "fig:sa-client-server-x" (c counter c (c (? . 5) c (? . 130))) (q part "sec:data-design") "ex:data-interp" "Designing Functions, Systematically" "fig:inspection" (c counter c (c (? . 5) c (? . 135))) (q part "sec:identify-components") (c 8 ? . 53) "fig:fun-seq" (c counter c (c (? . 5) c (? . 139))) "ex:naming" (c counter c (c (? . 8) c (? . 141))) (c counter c (c (? . 5) c (? . 219))) "ex:asts" (c counter c (c (? . 8) c (? . 144))) "fig:components" (c counter c (c (? . 5) c (? . 146))) "fig:inspection-2-memo" (q part "ch:design-alt") (q part "sec:srsd-sys-good") "fig:factored" "fig:inspection-design-mistake" (c counter c (c (? . 5) c (? . 152))) "fig:contract1" (c counter c (c (? . 5) c (? . 154))) (c counter c (c (? . 5) c (? . 186))) (q part "ch:ego") "Pushing Back During a Code Inspection" (c (? . 158)) (q part "part:postlude") (c counter c (c (? . 8) c (? . 269))) (q part "ch:present") "fig:sample-memo" (q part "ch:abstraction") (q part "Choosing_from_Several_Alternatives") (c (? . 117)) (q part "part:one") "A Second Look at the Tiny Case Study" (c (? . 168)) (q part "sec:method-design") (c (? . 74)) (q part "sec:documents") (c (? . 33)) (q part "ch:3art") "ex:protocol" (c counter c (c (? . 8) c (? . 175))) "ex:thermostat-data" (c counter c (c (? . 8) c (? . 177))) (c counter c (c (? . 8) c (? . 236))) (q part "sec:data-design2") (c (? . 64)) "The Size of Functions and Methods" (c (? . 182)) "Names Matter" (c (? . 184)) "fig:abstraction-diagram" "fig:inspection-error" "fig:compose-meth" "fig:code-good-outline" (c counter c (c (? . 5) c (? . 189))) "Favor Functions, Favor Immutability" "fig:sa-mvc" "Planning: How the Construction Proceeds" "Synthesis: Discovering Components" (c (? . 194)) "fig:compose" (c counter c (c (? . 5) c (? . 196))) (q part "A_Code_Inspection_Memo") (q part "Structured_Information") (c (? . 70)) (q part "sec:function-design") (c (? . 134)) (c counter c (c (? . 5) c (? . 222))) (q part "skills") "ex:memo2" "ex:java-list" (c counter c (c (? . 8) c (? . 206))) (c counter c (c (? . 5) c (? . 250))) "fig:oo-seq" (c counter c (c (? . 5) c (? . 209))) (q part "dear") "ex:class-abstract" (c counter c (c (? . 8) c (? . 212))) "fig:use-cases" (c counter c (c (? . 5) c (? . 214))) (q part "ch:managing") "fig:reviews" (c counter c (c (? . 5) c (? . 217))) "fig:code-good-aux" "The Labyrinth Game: A Problem Statement" (c (? . 220)) "fig:data-rep-good" (q part "sec:project-facets") (q "Analysis: Understanding the Project" rsquo "s Purpose and Context") "ex:data-rep" (c counter c (c (? . 8) c (? . 225))) "Inspecting Code for Design Mistakes" (c (? . 227)) (q part "ch:why-design-inspection") (c 13 ? . 53) (c counter c (c (? . 5) c (? . 273))) (q part "sec:class-abstraction") (c (? . 73)) (c 21 ? . 2) (q part "ch:inspect-code") "ex:organize" (q part "sec:function-abstraction") (c (? . 40)) (q part "Reacting_to_a_Code_Inspection") (c (? . 34)) "fig:player-state" (c counter c (c (? . 5) c (? . 241))) (q part "sec:conditions") (c (? . 15)) (q part "ch:api") "fig:code-good" (c counter c (c (? . 5) c (? . 246))) "Atomic vs Composite: A Tiny Case Study" (c (? . 248)) "fig:add1-diagram" "ex:named-constants" (c counter c (c (? . 8) c (? . 251))) "fig:pc" (c counter c (c (? . 5) c (? . 253))) "ex:game-state" (c counter c (c (? . 8) c (? . 255))) "fig:layers" "fig:sa-pipes" (c counter c (c (? . 5) c (? . 258))) "fig:sa-client-server-xyz" (c counter c (c (? . 5) c (? . 260))) (c part c (u . "chap:part:postlude")) (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_postlude.html" . unix) (q part "sec:project-plan") (c (? . 193)) (q part "ch:sample-project") (q part "part:old") (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/part_old.html" . unix) "ex:design-inspection" "ex:reliability" "Inspecting Code for Errors and Test Coverage Problems" (c (? . 271)) "fig:use-cases++" (q part "From_Information_to_Data_Representations__And_Back") (c (? . 63)) (q part "sec:project-proceed") (c (? . 80)) (q part "part:four") "Developing Data Representations for Information" (c (? . 279)) "fig:game-plan" (c counter c (c (? . 5) c (? . 281))) "ex:purpose1" "fig:system-analysis" "A Code Inspection Memo" (c (? . 285)) "fig:class-abstraction" (c counter c (c (? . 5) c (? . 287))) "fig:monolith" (c counter c (c (? . 5) c (? . 289))) (q part "ch:modules") "ex:merge" (q part "Favor_Functions__Favor_Immutability") (c (? . 191)) (c 6 ? . 21) (q part "part:three") "fig:gs-diagram" "Presenting Systematically Designed Code" (c (? . 298)) (q part "ch:basics") "fig:waterfall" (c counter c (c (? . 5) c (? . 301))) "Why Systematic Design is Socially Responsible" (c (? . 303)) "ex:tiny2" (c counter c (c (? . 8) c (? . 305)))) () (c (1 #f) h ! (equal) ((c counter c (c (? . 5) c (? . 246) c (? . 7))) . 38) ((? . 0) v! (? . 221) (? . 0) (c 1 ? . 78) (? . 3) #f) ((c counter c (c (? . 8) c (? . 225) ? . 9)) . 14) ((? . 1) v! (? . 169) (? . 1) (c 7 ? . 21) (? . 3) #f) ((? . 4) v! (q "Comments are Needed in a Small Number of Places") (? . 4) (c 15 ? . 2) (? . 3) #f) ((? . 6) v! #f (? . 6) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 130) c (? . 7))) . 12) ((c counter c (c (? . 8) c (? . 104) ? . 9)) . 6) ((c counter c (c (? . 5) c (? . 68) c (? . 7))) . 37) ((c counter c (c (? . 5) c (? . 11) c (? . 7))) . 11) ((? . 10) v! #f (? . 10) #f (? . 13) #f) ((? . 12) v! #f (? . 12) #f (? . 13) #f) ((c index-entry c (? . 28)) c (c (? . 14)) c (c (2 #f (? . 29))) c (? . 16)) ((c index-entry c (? . 243)) c (c (? . 15)) c (c (2 #f (? . 244))) c (? . 16)) ((c counter c (c (? . 5) c (? . 86) c (? . 7))) . 40) ((? . 17) v! #f (? . 17) #f (? . 3) #f) ((c index-entry c (? . 65)) c (c (? . 18)) c (c (2 #f (? . 66))) c (? . 16)) ((? . 19) v! (? . 159) (? . 19) (c 5 ? . 30) (? . 3) #f) ((c counter c (c (? . 5) c (? . 209) c (? . 7))) . 19) ((? . 20) v! (q "Systematic Design") (? . 20) (? . 21) (? . 3) #f) ((? . 22) v! (q "Software Inspections") (? . 22) (c 6 ? . 24) (? . 25) #f) ((c index-entry c (? . 48)) c (q "Structured Information: Don't Use Strings to Represent It") c (c (2 #f (? . 49))) c (? . 16)) ((c counter c (c (? . 8) c (? . 305) ? . 9)) . 19) ((? . 23) v! (? . 62) (? . 23) (c 5 ? . 24) (? . 25) #f) ((? . 26) v! (q "The Context, for the Instructor") (? . 26) (q #f #f #f) (? . 45) #f) ((? . 27) v! #f (? . 27) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 177) ? . 9)) . 9) ((c counter c (c (? . 5) c (? . 35) c (? . 7))) . 16) ((? . 28) v! (? . 29) (? . 28) (c 1 ? . 30) (? . 3) #f) ((? . 31) v! #f (? . 31) #f (? . 3) #f) ((c index-entry c (? . 41)) c (c (? . 32)) c (c (2 #f (? . 42))) c (? . 16)) ((c index-entry c (? . 172)) c (c (? . 33)) c (c (2 #f (? . 173))) c (? . 16)) ((c index-entry c (? . 239)) c (c (? . 34)) c (c (2 #f (? . 240))) c (? . 16)) ((? . 36) v! #f (? . 36) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 152) c (? . 7))) . 28) ((c counter c (c (? . 5) c (? . 258) c (? . 7))) . 9) ((? . 37) v! #f (? . 37) #f (? . 13) #f) ((? . 38) v! #f (? . 38) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 83) c (? . 7))) . 17) ((? . 39) v! #f (? . 39) #f (? . 3) #f) ((c index-entry c (? . 237)) c (c (? . 40)) c (c (2 #f (? . 238))) c (? . 16)) ((? . 41) v! (? . 42) (? . 41) (c 1 ? . 230) (? . 13) #f) ((? . 43) v! (? . 249) (? . 43) (c 5 ? . 21) (? . 3) #f) ((? . 44) v! (q "Prelude") (? . 44) (q #f) (? . 45) #t) ((? . 46) v! (q "Principles") (? . 46) (? . 24) (? . 25) #t) ((? . 47) v! #f (? . 47) #f (? . 3) #f) ((? . 48) v! (? . 49) (? . 48) (c 2 ? . 67) (? . 3) #f) ((? . 50) v! #f (? . 50) #f (? . 3) #f) ((? . 51) v! (q "Are You Socially Responsible?") (? . 51) (c 2 ? . 120) (? . 121) #f) ((c counter c (c (? . 8) c (? . 123) ? . 9)) . 1) ((c counter c (c (? . 8) c (? . 108) ? . 9)) . 18) ((? . 52) v! (q "Software Systems") (? . 52) (c 7 ? . 53) (? . 13) #f) ((c index-entry c (? . 126)) c (c (? . 54)) c (c (2 #f (? . 127))) c (? . 16)) ((c counter c (c (? . 5) c (? . 55) c (? . 7))) . 23) ((? . 56) v! #f (? . 56) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 189) c (? . 7))) . 36) ((? . 57) v! (? . 91) (? . 57) (c 3 ? . 21) (? . 3) #f) ((c counter c (c (? . 8) c (? . 94) ? . 9)) . 7) ((c counter c (c (? . 5) c (? . 59) c (? . 7))) . 41) ((? . 58) v! (? . 185) (? . 58) (c 1 ? . 111) (? . 3) #f) ((? . 60) v! #f (? . 60) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 141) ? . 9)) . 11) ((c index-entry c (? . 23)) c (c (? . 61)) c (c (2 #f (? . 62))) c (? . 16)) ((c index-entry c (? . 274)) c (c (? . 63)) c (c (2 #f (? . 275))) c (? . 16)) ((c index-entry c (? . 180)) c (c (? . 64)) c (c (2 #f (? . 181))) c (? . 16)) ((? . 65) v! (? . 66) (? . 65) (c 5 ? . 67) (? . 3) #f) ((? . 69) v! #f (? . 69) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 289) c (? . 7))) . 21) ((c index-entry c (? . 199)) c (c (? . 70)) c (c (2 #f (? . 200))) c (? . 16)) ((? . 71) v! #f (? . 71) #f (? . 3) #f) ((? . 72) v! #f (? . 72) #f (? . 3) #f) ((c index-entry c (? . 232)) c (c (? . 73)) c (c (2 #f (? . 233))) c (? . 16)) ((c index-entry c (? . 170)) c (c (? . 74)) c (c (2 #f (? . 171))) c (? . 16)) ((? . 75) v! (? . 228) (? . 75) (c 6 ? . 30) (? . 3) #f) ((? . 76) v! (q "Software Architecture") (? . 76) (c 9 ? . 53) (? . 13) #f) ((? . 77) v! (? . 98) (? . 77) (c 3 ? . 78) (? . 3) #f) ((c counter c (c (? . 5) c (? . 281) c (? . 7))) . 14) ((? . 79) v! (q "This Book and Its Parts") (? . 79) (q #f #f #f) (? . 45) #f) ((c index-entry c (? . 276)) c (c (? . 80)) c (c (2 #f (? . 277))) c (? . 16)) ((? . 81) v! (c "Socially Responsible " c (2 newline "") q " Software Development") (? . 81) () (p+ #"/Users/matthias/Felleisen.org/matthias/srsd/2023/Book/index.html" . unix) #t) ((? . 82) v! () (? . 82) (q #f #f) (? . 45) #f) ((? . 84) v! #f (? . 84) #f (? . 13) #f) ((? . 85) v! (q "Acknowledgments") (? . 85) (q #f #f #f) (? . 45) #f) ((? . 87) v! #f (? . 87) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 154) c (? . 7))) . 45) ((? . 88) v! (q "Developing a Complete Software System") (? . 88) (? . 138) (? . 13) #f) ((? . 89) v! #f (? . 89) #f (? . 3) #f) ((c index-entry c (? . 57)) c (c (? . 90)) c (c (2 #f (? . 91))) c (? . 16)) ((c counter c (c (? . 5) c (? . 287) c (? . 7))) . 43) ((c counter c (c (? . 8) c (? . 144) ? . 9)) . 16) ((? . 92) v! (q "Inspecting Code, Systematically") (? . 92) (? . 78) (? . 3) #f) ((? . 93) v! #f (? . 93) #f (? . 3) #f) ((? . 95) v! #f (? . 95) #f (? . 13) #f) ((? . 96) v! (? . 102) (? . 96) (c 1 ? . 67) (? . 3) #f) ((c index-entry c (? . 77)) c (c (? . 97)) c (c (2 #f (? . 98))) c (? . 16)) ((? . 99) v! #f (? . 99) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 100) ? . 9)) . 20) ((c index-entry c (? . 96)) c (c (? . 101)) c (c (2 #f (? . 102))) c (? . 16)) ((? . 103) v! (? . 272) (? . 103) (c 4 ? . 30) (? . 3) #f) ((? . 105) v! #f (? . 105) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 146) c (? . 7))) . 13) ((c counter c (c (? . 5) c (? . 106) c (? . 7))) . 29) ((? . 107) v! #f (? . 107) #f (? . 3) #f) ((? . 109) v! #f (? . 109) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 135) c (? . 7))) . 24) ((? . 110) v! (? . 183) (? . 110) (c 2 ? . 111) (? . 3) #f) ((? . 112) v! #f (? . 112) #f (? . 3) #f) ((c counter c (c (? . 5) c (? . 113) c (? . 7))) . 31) ((c counter c (c (? . 5) c (? . 114) c (? . 7))) . 42) ((? . 115) v! () (? . 115) (q #f #f) (? . 268) #f) ((? . 116) v! #f (? . 116) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 175) ? . 9)) . 8) ((c counter c (c (? . 5) c (? . 301) c (? . 7))) . 3) ((c index-entry c (? . 165)) c (c (? . 117)) c (c (2 #f (? . 166))) c (? . 16)) ((? . 118) v! (q "Clarity of Code") (? . 118) (c 14 ? . 2) (? . 3) #f) ((? . 119) v! (q "The Death of Software,  The Life of Software") (? . 119) (c 1 ? . 120) (? . 121) #f) ((? . 122) v! #f (? . 122) #f (? . 3) #f) ((? . 124) v! #f (? . 124) #f (? . 121) #f) ((c index-entry c (? . 38)) c (c (? . 125)) c (c (2 italic (? . 125))) q tech) ((c counter c (c (? . 5) c (? . 139) c (? . 7))) . 20) ((? . 126) v! (? . 127) (? . 126) (c 4 ? . 78) (? . 3) #f) ((c counter c (c (? . 5) c (? . 128) c (? . 7))) . 5) ((? . 129) v! #f (? . 129) #f (? . 13) #f) ((? . 131) v! #f (? . 131) #f (? . 13) #f) ((? . 132) v! (? . 280) (? . 132) (? . 67) (? . 3) #f) ((c counter c (c (? . 8) c (? . 133) ? . 9)) . 15) ((c index-entry c (? . 201)) c (c (? . 134)) c (c (2 #f (? . 202))) c (? . 16)) ((? . 136) v! #f (? . 136) #f (? . 3) #f) ((? . 137) v! (? . 195) (? . 137) (c 3 ? . 138) (? . 13) #f) ((? . 140) v! #f (? . 140) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 217) c (? . 7))) . 2) ((? . 142) v! #f (? . 142) #f (? . 3) #f) ((? . 143) v! #f (? . 143) #f (? . 3) #f) ((? . 145) v! #f (? . 145) #f (? . 3) #f) ((? . 147) v! #f (? . 147) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 148) c (? . 7))) . 26) ((? . 149) v! (q "Inspecting Component Designs") (? . 149) (c 12 ? . 53) (? . 13) #f) ((? . 150) v! (? . 304) (? . 150) (c 8 ? . 21) (? . 3) #f) ((c counter c (c (? . 5) c (? . 151) c (? . 7))) . 22) ((? . 153) v! #f (? . 153) #f (? . 3) #f) ((? . 155) v! #f (? . 155) #f (? . 3) #f) ((c counter c (c (? . 8) c (? . 206) ? . 9)) . 17) ((? . 156) v! #f (? . 156) #f (? . 3) #f) ((? . 157) v! (q "Egoless Programming") (? . 157) (c 4 ? . 24) (? . 25) #f) ((c counter c (c (? . 5) c (? . 253) c (? . 7))) . 1) ((c index-entry c (? . 19)) c (c (? . 158)) c (c (2 #f (? . 159))) c (? . 16)) ((? . 160) v! (q "Postlude") (? . 160) (q #f) (? . 263) #t) ((c counter c (c (? . 5) c (? . 260) c (? . 7))) . 15) ((c counter c (c (? . 5) c (? . 241) c (? . 7))) . 18) ((? . 161) v! #f (? . 161) #f (? . 13) #f) ((? . 162) v! (? . 299) (? . 162) (c 2 ? . 78) (? . 3) #f) ((c counter c (c (? . 5) c (? . 163) c (? . 7))) . 25) ((? . 164) v! (q "Systematic Abstraction") (? . 164) (? . 234) (? . 3) #f) ((? . 165) v! (? . 166) (? . 165) (c 6 ? . 67) (? . 3) #f) ((c counter c (c (? . 5) c (? . 196) c (? . 7))) . 32) ((? . 167) v! (q "Perspective") (? . 167) (? . 120) (? . 121) #t) ((c index-entry c (? . 1)) c (c (? . 168)) c (c (2 #f (? . 169))) c (? . 16)) ((? . 170) v! (? . 171) (? . 170) (? . 295) (? . 3) #f) ((? . 172) v! (? . 173) (? . 172) (c 5 ? . 138) (? . 13) #f) ((? . 174) v! (q "The Nature of Software Development") (? . 174) (c 3 ? . 24) (? . 25) #f) ((? . 176) v! #f (? . 176) #f (? . 13) #f) ((? . 178) v! #f (? . 178) #f (? . 3) #f) ((? . 179) v! #f (? . 179) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 251) ? . 9)) . 10) ((? . 180) v! (? . 181) (? . 180) (c 2 ? . 21) (? . 3) #f) ((c counter c (c (? . 8) c (? . 212) ? . 9)) . 22) ((c counter c (c (? . 5) c (? . 214) c (? . 7))) . 6) ((c index-entry c (? . 110)) c (c (? . 182)) c (c (2 #f (? . 183))) c (? . 16)) ((c index-entry c (? . 58)) c (c (? . 184)) c (c (2 #f (? . 185))) c (? . 16)) ((c counter c (c (? . 5) c (? . 186) c (? . 7))) . 44) ((c index-entry c (? . 223)) c (q "Analysis: Understanding the Project's Purpose and Context") c (c (2 #f (? . 224))) c (? . 16)) ((c counter c (c (? . 5) c (? . 187) c (? . 7))) . 27) ((c counter c (c (? . 5) c (? . 188) c (? . 7))) . 34) ((? . 190) v! #f (? . 190) #f (? . 3) #f) ((c index-entry c (? . 293)) c (c (? . 191)) c (c (2 #f (? . 294))) c (? . 16)) ((c counter c (c (? . 5) c (? . 192) c (? . 7))) . 10) ((c index-entry c (? . 264)) c (c (? . 193)) c (c (2 #f (? . 265))) c (? . 16)) ((c index-entry c (? . 137)) c (c (? . 194)) c (c (2 #f (? . 195))) c (? . 16)) ((? . 197) v! #f (? . 197) #f (? . 3) #f) ((? . 198) v! (? . 286) (? . 198) (c 2 ? . 30) (? . 3) #f) ((? . 199) v! (? . 200) (? . 199) (c 3 ? . 67) (? . 3) #f) ((? . 201) v! (? . 202) (? . 201) (c 4 ? . 21) (? . 3) #f) ((? . 203) v! #f (? . 203) #f (? . 3) #f) ((? . 204) v! (q "Developing a Mind Set") (? . 204) (q #f #f #f) (? . 45) #f) ((c counter c (c (? . 8) c (? . 205) ? . 9)) . 13) ((? . 207) v! #f (? . 207) #f (? . 3) #f) ((? . 208) v! #f (? . 208) #f (? . 3) #f) ((? . 210) v! #f (? . 210) #f (? . 13) #f) ((? . 211) v! (q "Dear Instructor:") (? . 211) (q #f #f #f) (? . 45) #f) ((? . 213) v! #f (? . 213) #f (? . 3) #f) ((? . 215) v! #f (? . 215) #f (? . 13) #f) ((? . 216) v! (q "Inspecting the Plan") (? . 216) (c 11 ? . 53) (? . 13) #f) ((? . 218) v! #f (? . 218) #f (? . 25) #f) ((c counter c (c (? . 5) c (? . 219) c (? . 7))) . 39) ((c index-entry c (? . 0)) c (c (? . 220)) c (c (2 #f (? . 221))) c (? . 16)) ((c counter c (c (? . 5) c (? . 222) c (? . 7))) . 35) ((? . 223) v! (? . 224) (? . 223) (c 2 ? . 138) (? . 13) #f) ((? . 226) v! #f (? . 226) #f (? . 3) #f) ((c index-entry c (? . 75)) c (c (? . 227)) c (c (2 #f (? . 228))) c (? . 16)) ((? . 229) v! (q "Why Inspections Matter Even If There is No Code") (? . 229) (? . 230) (? . 13) #f) ((? . 231) v! #f (? . 231) #f (? . 13) #f) ((? . 232) v! (? . 233) (? . 232) (c 2 ? . 234) (? . 3) #f) ((? . 235) v! (q "Inspecting Code, the Basics") (? . 235) (? . 30) (? . 3) #f) ((c counter c (c (? . 8) c (? . 236) ? . 9)) . 3) ((? . 237) v! (? . 238) (? . 237) (c 1 ? . 234) (? . 3) #f) ((? . 239) v! (? . 240) (? . 239) (c 3 ? . 30) (? . 3) #f) ((? . 242) v! #f (? . 242) #f (? . 13) #f) ((? . 243) v! (? . 244) (? . 243) (c 3 ? . 111) (? . 3) #f) ((? . 245) v! (q "Module and API Design") (? . 245) (c 22 ? . 2) (? . 3) #f) ((? . 247) v! #f (? . 247) #f (? . 3) #f) ((c index-entry c (? . 43)) c (c (? . 248)) c (c (2 #f (? . 249))) c (? . 16)) ((c counter c (c (? . 8) c (? . 255) ? . 9)) . 4) ((c counter c (c (? . 5) c (? . 250) c (? . 7))) . 30) ((? . 252) v! #f (? . 252) #f (? . 3) #f) ((? . 254) v! #f (? . 254) #f (? . 45) #f) ((? . 256) v! #f (? . 256) #f (? . 13) #f) ((c counter c (c (? . 5) c (? . 257) c (? . 7))) . 8) ((? . 259) v! #f (? . 259) #f (? . 13) #f) ((? . 261) v! #f (? . 261) #f (? . 13) #f) ((? . 262) v! () (? . 262) (q #f #f) (? . 263) #f) ((? . 264) v! (? . 265) (? . 264) (c 4 ? . 138) (? . 13) #f) ((? . 266) v! (q "A Sample Project: Analysis, Discovery, Planning") (? . 266) (c 10 ? . 53) (? . 13) #f) ((? . 267) v! (q "Old Material") (? . 267) (q #f) (? . 268) #t) ((c counter c (c (? . 8) c (? . 269) ? . 9)) . 5) ((c counter c (c (? . 8) c (? . 270) ? . 9)) . 2) ((c index-entry c (? . 103)) c (c (? . 271)) c (c (2 #f (? . 272))) c (? . 16)) ((c counter c (c (? . 5) c (? . 273) c (? . 7))) . 7) ((? . 274) v! (? . 275) (? . 274) (c 4 ? . 67) (? . 3) #f) ((? . 276) v! (? . 277) (? . 276) (c 1 ? . 138) (? . 13) #f) ((? . 278) v! (q "Project") (? . 278) (? . 53) (? . 13) #t) ((c index-entry c (? . 132)) c (c (? . 279)) c (c (2 #f (? . 280))) c (? . 16)) ((? . 282) v! #f (? . 282) #f (? . 13) #f) ((c counter c (c (? . 8) c (? . 283) ? . 9)) . 21) ((c counter c (c (? . 5) c (? . 284) c (? . 7))) . 4) ((c index-entry c (? . 198)) c (c (? . 285)) c (c (2 #f (? . 286))) c (? . 16)) ((? . 288) v! #f (? . 288) #f (? . 3) #f) ((? . 290) v! #f (? . 290) #f (? . 3) #f) ((? . 291) v! (q "API") (? . 291) (c 20 ? . 2) (? . 3) #f) ((c counter c (c (? . 8) c (? . 292) ? . 9)) . 12) ((? . 293) v! (? . 294) (? . 293) (c 1 ? . 295) (? . 3) #f) ((? . 296) v! (q "Programming") (? . 296) (? . 2) (? . 3) #t) ((c counter c (c (? . 5) c (? . 297) c (? . 7))) . 33) ((c index-entry c (? . 162)) c (c (? . 298)) c (c (2 #f (? . 299))) c (? . 16)) ((? . 300) v! (q "The Very Basics") (? . 300) (? . 111) (? . 3) #f) ((? . 302) v! #f (? . 302) #f (? . 13) #f) ((c index-entry c (? . 150)) c (c (? . 303)) c (c (2 #f (? . 304))) c (? . 16)) ((? . 306) v! #f (? . 306) #f (? . 3) #f)))