<lecture title="Assertions and Contract">

<div>
<h2>Assertions and Proofs: Minimums in Arrays</h2>
<p />
<div align="left"><pre class="scheme"><span class="variable">class</span> <span class="variable">Min</span> {
    
    <span class="variable">static</span> <span class="variable">int</span> <span class="variable">min</span>(<span class="variable">int</span> <span class="variable">a</span>[]) { 
	<span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">a.length</span> <span class="variable">&gt;</span> <span class="selfeval">0</span> 
	<span class="variable">int</span> <span class="variable">m</span> <span class="variable">=</span> <span class="variable">a</span>[<span class="selfeval">0</span>]<span class="comment">;</span>
	<span class="variable">for</span>(<span class="variable">int</span> <span class="variable">elmnt</span> <span class="selfeval">:</span> <span class="variable">a</span>) 
	    <span class="variable">m</span> <span class="variable">=</span> <span class="variable">smaller</span>(<span class="variable">elmnt</span><span class="keyword">,</span><span class="variable">m</span>)<span class="comment">;</span>
	<span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">forall</span>(<span class="variable">i</span> <span class="variable">in</span> [<span class="selfeval">0</span><span class="keyword">,</span><span class="variable">a.length</span>){ <span class="variable">m</span> <span class="variable">&lt;=</span> <span class="variable">a</span>[<span class="variable">i</span>] }
	<span class="variable">//</span>       <span class="variable">&amp;</span> <span class="variable">exists</span>(<span class="variable">i</span> <span class="variable">in</span> [<span class="selfeval">0</span><span class="keyword">,</span><span class="variable">a.length</span>){ <span class="variable">m</span> <span class="variable">==</span> <span class="variable">a</span>[<span class="variable">i</span>] }
	<span class="variable">return</span> <span class="variable">m</span><span class="comment">;</span>
    }

    <span class="variable">static</span> <span class="variable">int</span> <span class="variable">smaller</span>(<span class="variable">int</span> <span class="variable">x</span><span class="keyword">,</span> <span class="variable">int</span> <span class="variable">y</span>) {
	<span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">true</span>
	<span class="keyword">if</span> (<span class="variable">x</span> <span class="variable">&lt;</span> <span class="variable">y</span>)
	    <span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">x</span> <span class="variable">&lt;</span> <span class="variable">y</span> 
	    <span class="variable">return</span> <span class="variable">x</span><span class="comment">;</span>
	<span class="keyword">else</span> 
	    <span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">y</span> <span class="variable">&lt;=</span> <span class="variable">x</span>
	    <span class="variable">return</span> <span class="variable">y</span><span class="comment">;</span>
    }

    <span class="variable">public</span> <span class="variable">static</span> <span class="variable">void</span> <span class="variable">main</span>(<span class="variable">String</span> <span class="variable">argv</span>[]) { 
	<span class="variable">int</span> <span class="variable">a</span>[] <span class="variable">=</span> {<span class="selfeval">-3</span><span class="keyword">,</span><span class="selfeval">2</span><span class="keyword">,</span><span class="selfeval">-8</span>}<span class="comment">;</span>
	<span class="variable">int</span> <span class="variable">b</span>[] <span class="variable">=</span> {<span class="selfeval">-19</span>}<span class="comment">;</span>
	<span class="variable">int</span> <span class="variable">c</span>[] <span class="variable">=</span> {}<span class="comment">;</span>
	<span class="variable">System.out.println</span>(<span class="variable">min</span>(<span class="variable">a</span>) <span class="variable">+</span> <span class="selfeval">" == -8"</span>)<span class="comment">;</span>
	<span class="variable">System.out.println</span>(<span class="variable">min</span>(<span class="variable">b</span>) <span class="variable">+</span> <span class="selfeval">" == -19"</span>)<span class="comment">;</span>
	<span class="variable">try</span> {
	    <span class="variable">System.out.println</span>(<span class="variable">min</span>(<span class="variable">c</span>))<span class="comment">;</span>
	}
	<span class="variable">catch</span> (<span class="variable">ArrayIndexOutOfBoundsException</span> <span class="variable">e</span>) {
	    <span class="variable">System.out.println</span>(<span class="selfeval">"contract!"</span>)<span class="comment">;</span>
	}
    }

}

</pre></div><p />
<p>
</p>
<a name="node_sec_Temp_2" />
<h2>Assertions and Proofs: Minimums in Lists</h2>
<p />
<div align="left"><pre class="scheme"><span class="variable">class</span> <span class="variable">Cons</span> {
    <span class="variable">private</span> <span class="variable">int</span>  <span class="variable">fst</span><span class="comment">;</span>
    <span class="variable">private</span> <span class="variable">Cons</span> <span class="variable">rst</span><span class="comment">;</span>
    <span class="variable">public</span> <span class="variable">Cons</span>(<span class="variable">int</span> <span class="variable">fst</span><span class="keyword">,</span> <span class="variable">Cons</span> <span class="variable">rst</span>) { 
	<span class="variable">this.fst</span> <span class="variable">=</span> <span class="variable">fst</span><span class="comment">;</span>
	<span class="variable">this.rst</span> <span class="variable">=</span> <span class="variable">rst</span><span class="comment">;</span>
    }

    <span class="variable">//</span> <span class="variable">find</span> <span class="variable">the</span> <span class="variable">minimum</span> <span class="variable">number</span> <span class="variable">on</span> <span class="variable">this</span> <span class="variable">list</span> 
    <span class="variable">public</span> <span class="variable">int</span> <span class="variable">min</span>() { 
	<span class="variable">int</span> <span class="variable">m</span><span class="comment">;</span>
	<span class="keyword">if</span> (<span class="variable">null</span> <span class="variable">!=</span> <span class="variable">this.rst</span>)
	    <span class="variable">m</span> <span class="variable">=</span> <span class="variable">smaller</span>(<span class="variable">this.fst</span><span class="keyword">,</span><span class="variable">this.rst.min</span>())<span class="comment">;</span>
	<span class="keyword">else</span> 
	    <span class="variable">m</span> <span class="variable">=</span> <span class="variable">this.fst</span><span class="comment">;</span>
	<span class="variable">//</span> <span class="variable">assert:</span> <span class="variable">forall</span>(<span class="variable">i</span> <span class="variable">in</span> <span class="variable">Nat</span>) { <span class="variable">m</span> <span class="variable">&lt;=</span> <span class="variable">this.rest^i</span>()<span class="variable">.first</span>() }
	<span class="variable">//</span>       <span class="variable">&amp;</span> <span class="variable">exists</span>(<span class="variable">i</span> <span class="variable">in</span> <span class="variable">Nat</span>) { <span class="variable">m</span> <span class="variable">=</span> <span class="variable">this.rest^i</span>()<span class="variable">.first</span>() }
	<span class="variable">return</span> <span class="variable">m</span><span class="comment">;</span>
    }

    <span class="variable">private</span> <span class="variable">static</span> <span class="variable">int</span> <span class="variable">smaller</span>(<span class="variable">int</span> <span class="variable">x</span><span class="keyword">,</span> <span class="variable">int</span> <span class="variable">y</span>) {
	<span class="keyword">if</span> (<span class="variable">x</span> <span class="variable">&lt;</span> <span class="variable">y</span>)
	    <span class="variable">return</span> <span class="variable">x</span><span class="comment">;</span>
	<span class="keyword">else</span> 
	    <span class="variable">return</span> <span class="variable">y</span><span class="comment">;</span>
    }
    
    <span class="variable">//</span> <span class="variable">effect:</span> <span class="variable">strange</span> 
    <span class="variable">public</span> <span class="variable">void</span> <span class="variable">set</span>(<span class="variable">Cons</span> <span class="variable">nxt</span>) {
	<span class="variable">this.rst</span> <span class="variable">=</span> <span class="variable">nxt</span><span class="comment">;</span>
    }
}

<span class="variable">class</span> <span class="variable">Main2</span> {
    <span class="variable">public</span> <span class="variable">static</span> <span class="variable">void</span> <span class="variable">main</span>(<span class="variable">String</span> <span class="variable">argv</span>[]) { 
	<span class="variable">Cons</span> <span class="variable">mt</span> <span class="variable">=</span> <span class="variable">null</span><span class="comment">;</span>
	<span class="variable">Cons</span> <span class="variable">c1</span> <span class="variable">=</span> <span class="variable">new</span> <span class="variable">Cons</span>(<span class="selfeval">+1</span><span class="keyword">,</span><span class="variable">mt</span>)<span class="comment">;</span>
	<span class="variable">Cons</span> <span class="variable">c2</span> <span class="variable">=</span> <span class="variable">new</span> <span class="variable">Cons</span>(<span class="selfeval">-1</span><span class="keyword">,</span><span class="variable">c1</span>)<span class="comment">;</span>

	<span class="variable">System.out.println</span>(<span class="variable">c2.min</span>() <span class="variable">+</span> <span class="selfeval">" == -1"</span>)<span class="comment">;</span>

	<span class="variable">try</span> {
	    <span class="variable">c2.set</span>(<span class="variable">c2</span>)<span class="comment">;</span>
	    <span class="variable">System.out.println</span>(<span class="variable">c2.min</span>() <span class="variable">+</span> <span class="selfeval">" == -1"</span>)<span class="comment">;</span>
	}
	<span class="variable">catch</span> (<span class="variable">StackOverflowError</span> <span class="variable">e</span>) { 
	    <span class="variable">System.out.println</span>(<span class="selfeval">"contract!"</span>)<span class="comment">;</span>
	}
    }
}


</pre></div><p />
<p>
</p>
</div>

</lecture>
