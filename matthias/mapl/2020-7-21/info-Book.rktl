((3) 3 (((lib "scribble/decode-struct.rkt") . deserialize-info:part-index-desc-v0) ((lib "scribble/render-struct.rkt") . deserialize-info:mobile-root-v0) ((lib "scribble/core.rkt") . deserialize-info:element-v0)) 526 ((q part "sec:interpreter") "exercise" (c (? . 25)) "Continuation Delimiting" (c (c (? . 1) c (? . 59))) "C" (c counter c (c (? . 11) c (? . 58))) (c tech c (? . 291)) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_arith.html" . unix) (c counter c (c (? . 1) c (? . 395))) (q part "part:epilogue") "figure" (c counter c (c (? . 11) c (? . 306))) (c (c (? . 11) c (? . 427))) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_mutation.html" . unix) (c counter c (c (? . 1) c (? . 401))) (q part "sec:rec") (q part "sec:stack") (q 2) "Futures" (0) (c counter c (c (? . 1) c (? . 109))) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_algebra.html" . unix) (c (c (? . 11) c (? . 491))) "Summary" "value" (q part "pro:sys-des-ex") "" (c counter c (c (? . 1) c (? . 135))) "exn" "x" (p+ #"../ppl-web/docs/2020-7-21/Book/ch_cc.html" . unix) (q part "sec:lambda") (q 4) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_lambda.html" . unix) (c (c (? . 11) c (? . 116))) "AST-def*" (q tech "ast arithmetic/error") "ck-arith" (q part "pro:impl-am") (p+ #"../ppl-web/docs/2020-7-21/Book/part_prologue.html" . unix) (q tech "frame") "loop" "e" "Programming Languages" "cesk" "sec:cb-reference" "AST-f-arithmetic" (c (c (? . 1) c (? . 428))) "AST-algebra" "step2" "A State Machine for Arithmetic: Determinism" "prompt" "Space" "sec:cesk" (c 5 ? . 74) "Scope vs. State" (c (c (? . 1) c (? . 451))) "fig:fun-cek" "ex:callcc1" (c counter c (c (? . 1) c (? . 99))) "Loops" "ast set" "sec:exn" "set" (c (c (? . 1) c (? . 165))) "algebra" (c (c (? . 1) c (? . 168))) (q part "ch:cc") (q 6) "Equality and Change" (q part "Idioms__Pragmatics") (c counter c (c (? . 11) c (? . 370))) "sec:set!" (q 5) (c counter c (c (? . 1) c (? . 139))) "store" "callcc" (c (c (? . 1) c (? . 188))) "AST-def" (c counter c (c (? . 11) c (? . 227))) "CEK-frame" "5sum" "parameter" "The Syntax and Abstract Syntax of Arithmetic" (c counter c (c (? . 11) c (? . 208))) (q part "pro:sys-des") (q part "Meaning__Execution") (q 1) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_pl.html" . unix) (c counter c (c (? . 1) c (? . 363))) "fig:redexes" (c counter c (c (? . 11) c (? . 91))) "What is Recursion, Take 2" (c counter c (c (? . 1) c (? . 241))) (c (c (? . 11) c (? . 243))) (c tech c (? . 225)) (c (c (? . 1) c (? . 322))) (q tech "ck arith f") "ex:representation" "Grammar, Parsing" "AST-value" (c counter c (c (? . 1) c (? . 255))) (q part "sec:exceptions") "ex:json-lc" (c counter c (c (? . 1) c (? . 104))) (c (c (? . 1) c (? . 474))) (c (c (? . 1) c (? . 358))) "sec:callcc" "ex:cek-cbn1" (q part "sec:algebra") "Name" "env" (c counter c (c (? . 11) c (? . 283))) "Field" (c counter c (c (? . 1) c (? . 261))) "fig:let-ck" "ex:exn1" (c (c (? . 1) c (? . 117))) (c (c (? . 11) c (? . 375))) (c counter c (c (? . 1) c (? . 242))) "An Interpreter for Arithmetic" (c (? . 121)) "ex:arith2" (c counter c (c (? . 1) c (? . 123))) (c counter c (c (? . 1) c (? . 473))) "K" (c (c (? . 1) c (? . 507))) (c counter c (c (? . 11) c (? . 421))) (c (c (? . 11) c (? . 294))) "What is Recursion" (c (? . 130)) "A Stack Machine for Arithmetic" (c (? . 132)) (c tech c (? . 357)) "ex:parse-arith1" (c counter c (c (? . 1) c (? . 211))) (c counter c (c (? . 1) c (? . 400))) (c counter c (c (? . 1) c (? . 298))) "ex:y!-2" (c counter c (c (? . 1) c (? . 351))) (c counter c (c (? . 11) c (? . 302))) (c counter c (c (? . 1) c (? . 148))) (q part "Conversational_Context__Static_Checking") (q part "sec:theorems2") (q 3) "fig:lc-homework" (c counter c (c (? . 11) c (? . 146))) "ex:cek1" (q tech "cc arith f") (c counter c (c (? . 11) c (? . 485))) "First-Class Functions" (c (? . 151)) (c counter c (c (? . 11) c (? . 269))) (q part "pro:tx-dat") "AST-arithmetic/error" (c counter c (c (? . 11) c (? . 444))) (q tech "c arith") "Frame" (q tech "cek let") (q part "sec:theorems1") (q part "sec:static") "Call by Reference" (c (? . 162)) (q tech "ast arithmetic c") "ex:json-set2" (q tech "ast lambda") (c tech c (? . 301)) "ex:let-cek-alg1" (c (c (? . 1) c (? . 272))) "The CESK Machine" (c (? . 170)) "ex:static-scope0" (c counter c (c (? . 1) c (? . 172))) (q tech "cek fun") (q part "ch:algebra") (c counter c (c (? . 1) c (? . 350))) (q part "Vocabulary__Reading") (q part "ch:types") "fig:ext-equality" (c counter c (c (? . 11) c (? . 179))) (c counter c (c (? . 1) c (? . 217))) (c tech c (? . 315)) "AST-set" "Exception Handling" (c (? . 184)) (c counter c (c (? . 1) c (? . 312))) (c part c (u . "chap:part:prologue")) "ex:ck-alg1" (c counter c (c (? . 11) c (? . 275))) "Full Control" (c (? . 190)) (q part "sub:name") (c (c (? . 1) c (? . 240))) (c counter c (c (? . 1) c (? . 268))) "fig:prog-vs-test" (c counter c (c (? . 11) c (? . 195))) "Idioms, Pragmatics" (c (? . 197)) (c part c (u . "chap:part:epilogue")) (p+ #"../ppl-web/docs/2020-7-21/Book/part_epilogue.html" . unix) (q part "sec:theorems3") "ex:while-loop" (c (c (? . 1) c (? . 202))) "Assignments" (c (? . 204)) (c counter c (c (? . 1) c (? . 271))) "sec:5sum" "fig:arith-cc" "fig:fun-envs" (c counter c (c (? . 11) c (? . 209))) "ex:static-scope2" (q tech "c arith f") (q part "Crazy_Combinators") (c 2 ? . 33) "Parameters" (c counter c (c (? . 1) c (? . 237))) "ex:cek3" "\n" (q part "ch:arith") "Meaning, Execution" (c (? . 220)) "ex:scope-state4" (c counter c (c (? . 1) c (? . 222))) (c (c (? . 1) c (? . 307))) "cek" "ck-arith-f" "fig:parser-arith" (q part "sec:3sum") "ex:free" (c counter c (c (? . 1) c (? . 229))) "Division" (c (? . 231)) "Continuation Handling" (c (? . 233)) "sec:laziness" (c counter c (c (? . 1) c (? . 453))) "ex:y1" "Variables and Functions" (c (? . 238)) "ex:prompt3" "ex:alias1" "ex:alias3" "fig:let-cek" "l" (q tech "ast sk") "fig:homework" (c counter c (c (? . 11) c (? . 246))) "ex:cek-alg4" (c counter c (c (? . 1) c (? . 248))) (c counter c (c (? . 1) c (? . 500))) (q part "models") "sec:obs-equ" "E" (q tech "ast arithmetic") "ex:json-algebra" "ev" "ex:asm-arith" (c counter c (c (? . 1) c (? . 257))) "ex:scope-state1" (c counter c (c (? . 1) c (? . 259))) "ex:parse-arith1-sexpr" "ex:asm-string-det-2" (c (c (? . 1) c (? . 262))) "ex:cek-alg1" (c counter c (c (? . 1) c (? . 264))) "Arguments" (q part "ch:express") "ex:static-scope1" "fig:interpreter-arith" (c counter c (c (? . 1) c (? . 269))) "ex:y2" "ex:prompt2" (q part "sec:6sum") (q part "sec:ackn") "fig:div-ck" "Theorems and Language Design" (c (? . 276)) "Conversational Context, Static Checking" (c (? . 278)) "cc-arith-f" (q part "sec:machine") (p+ #"../ppl-web/docs/2020-7-21/Book/part_preface.html" . unix) "fig:interpreter-arith-2" "ex:cek-alg2" (c counter c (c (? . 1) c (? . 284))) (c (c (? . 1) c (? . 341))) "c-arith" "cek-let" "Theorems" (c (? . 289)) "k" "Static Checking: Scope" (c (? . 292)) "fig:cesk" "AST-arithmetic-C" "ex:scope-state3" (c counter c (c (? . 1) c (? . 296))) "ex:div-string-det-2" "fig:interpreter-string-arith" (c counter c (c (? . 1) c (? . 299))) "abstract syntax tree for arithmetic" "fig:cek" "AST-lambda" (c counter c (c (? . 1) c (? . 396))) (q part "sec:stepper-1") "fig:prog-set-oo" "ex:prompt1" (c "Algebra, Your Second Programming" c (? . 218) q "Language") "cek-fun" "Vocabulary, Reading" (c (? . 310)) "ex:y!-3" "Types" (c (? . 313)) "addition expression" "S" (c counter c (c (? . 1) c (? . 508))) "ex:scope-state2" (c counter c (c (? . 1) c (? . 318))) "Delayed Evaluation: Call By Name" (c (? . 320)) "ex:ck-algebra-let-cek" (q part "part:prologue") "location" (c (c (? . 1) c (? . 519))) (c (c (? . 11) c (? . 327))) "fig:let-subst" "The Type Soundness Theorem" (c (? . 328)) (c (? . 24)) "ex:fsm" (c counter c (c (? . 1) c (? . 331))) (c counter c (c (? . 1) c (? . 352))) (q part "sec:scope") (q part "ch:mutation") "eframe" (q part "ch:lambda") "c-arith-f" (q part "sec:2sum") (q part "sec:4sum") "ex:exn3" "Crazy Combinators" (c (? . 342)) (q part "sec:fun") (c 5 ? . 145) (q part "The_Names_of_Machines__C__CC__CK") (c 5 ? . 18) (c "Arithmetic," c (? . 218) q "Your First Programming Language") (c counter c (c (? . 1) c (? . 505))) "ex:arith1" "ex:arith3" "ex:simple-theorem" (c (? . 24)) "Call by Need" (c (? . 354)) (q tech "cc arith") "argument" "ex:exn2" "ex:div-det" (c counter c (c (? . 1) c (? . 359))) (c part c (u . "chap:part:preface")) "AST-sk" "ex:ctxt-lc" (q part "sec:cek") (c tech c (? . 83)) "ex:parse-arith3" (c counter c (c (? . 1) c (? . 366))) "ex:cesk3" (c (c (? . 1) c (? . 368))) "fig:prog-set" "fig:fun-cek-cbn" (c counter c (c (? . 11) c (? . 371))) "Models: Science and Engineering in Programming Languages" (c (? . 373)) "fig:cesk-set" "Observayional Equivalenece and Referential Transparency" (c (? . 376)) "AST-arithmetic" "sec:prompt" (c (? . 3)) "Ev" "ex:div-design" (c counter c (c (? . 1) c (? . 382))) (q tech "c") "fig:bracket" (c counter c (c (? . 11) c (? . 385))) "fig:cesk-lazy" (c (c (? . 11) c (? . 387))) "ex:cesk2" (c (c (? . 1) c (? . 389))) "The Dimensions" (c (? . 391)) "ex:ck-string-det" (c counter c (c (? . 1) c (? . 393))) "ex:parse-arith2" "ex:interpretation" (c (? . 24)) (q part "ch:futures") (c (? . 19)) "ex:alias2" "ex:div-string-det" (q part "1summary") (c (? . 24)) (c counter c (c (? . 11) c (? . 445))) "sec:let" "ex:cesk1" (c (c (? . 1) c (? . 406))) (c counter c (c (? . 11) c (? . 412))) (q part "htdp2e") (q tech "ast def*") (q tech "ck arith") "fig:int-equality" "fig:sm" (c counter c (c (? . 11) c (? . 413))) (q part "ch:pl") (c (? . 44)) "ex:trace-asm-arith2" (c counter c (c (? . 1) c (? . 417))) "ex:recursive?" (c counter c (c (? . 1) c (? . 419))) "fig:prog-set-2" "A State Machine for Arithmetic: Non-Determinism" (c (? . 422)) (q tech "ast f arithmetic") "ex:asm-arith-det" (c (c (? . 1) c (? . 425))) "fig:cesk-ref" "ex:json-set1" (q tech "ast algebra") "sec:stepper-2" (c (? . 51)) "fig:fsm" (c counter c (c (? . 11) c (? . 432))) "fig:cek-envs" (c counter c (c (? . 11) c (? . 434))) (q part "sec:alias") (c (? . 56)) (q part "ch:space") (c (? . 53)) "fig:sum" (c counter c (c (? . 11) c (? . 440))) (q part "part:preface") (q part "sec:pl") "fig:model-reality" "fig:machine-outline" "sec:loop" (c (? . 61)) "Location" (q part "sec:equal") (c (? . 70)) "ex:trace-asm-arith3" (q part "pro:programming") "ex:cek-alg3" "ex:json-set" (c (c (? . 1) c (? . 454))) "Static Scope" (c (? . 456)) (c counter c (c (? . 11) c (? . 504))) "Mutable Objects" (c (? . 459)) "EFrame" "ex:ck-string-det-2" (c counter c (c (? . 1) c (? . 462))) (c (? . 151)) (c (? . 24)) (c (? . 24)) (c counter c (c (? . 11) c (? . 518))) "The Meaning of Function Definitions" (c (? . 468)) "The Names of Machines: C, CC, CK" (c (? . 470)) (q tech "ast def") "ex:cek2" "ex:do-loop" "ex:y!" (c counter c (c (? . 1) c (? . 475))) "fig:arith-ck" (c counter c (c (? . 11) c (? . 477))) (q part "pro:abstract-machines") (q tech "cek frame") "ex:scope" (c counter c (c (? . 1) c (? . 481))) (q part "sec:arith-syn") (c (? . 84)) "fig:stepper-arith" (q part "sec:instructor") (q part "sec:rec!") (c (? . 93)) "ex:asm-string-det" (c (c (? . 1) c (? . 489))) "fig:arith-c" "ex:callcc3" (c (c (? . 1) c (? . 492))) (q part "Grammar__Parsing") (c (? . 100)) "ex:lazy3" (c (c (? . 1) c (? . 496))) (q tech "ast value") (q part "sec:choice") "ex:trace-asm-arith" "cc-arith" "ex:shadow" (c counter c (c (? . 1) c (? . 502))) "fig:all-defined" "fig:interpreter-mix-arith" (q tech "name") "ex:lazy1" "ex:ck-arith-det" "The CEK Machine" (c (? . 509)) "ex:ctxt-lc2" (c counter c (c (? . 1) c (? . 511))) "ex:callcc2" (c (c (? . 1) c (? . 513))) "ex:lazy2" (c (c (? . 1) c (? . 515))) "field" "fig:contexts" "ex:for-loop" "ex:inf-sm" (c counter c (c (? . 1) c (? . 520))) "ex:num" (c counter c (c (? . 1) c (? . 522))) "ex:cek-cbn2" (c counter c (c (? . 1) c (? . 524)))) () (c (1 #f) h ! (equal) ((? . 0) v! (? . 122) (? . 0) (c 2 ? . 18) (? . 8) #f) ((c counter c (c (? . 1) c (? . 259) ? . 2)) . 62) ((c counter c (c (? . 1) c (? . 296) ? . 2)) . 64) ((c index-entry c (c part c (c (? . 52) c (? . 379)))) c (c (? . 3)) c (c (2 #f (? . 380))) c (? . 20)) ((c counter ? . 4) v! #f (c counter c (? . 77) ? . 4) #f (? . 31) #f) ((c index-entry c (? . 384)) c (c (? . 5)) c (c (2 italic (? . 5))) q tech) ((? . 6) v! #f (? . 6) #f (? . 22) #f) ((? . 7) v! #f (? . 7) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 202) ? . 2)) . 75) ((c counter c (c (? . 1) c (? . 284) ? . 2)) . 43) ((? . 9) v! #f (? . 9) #f (? . 8) #f) ((? . 10) v! (q "Epilogue") (? . 10) (c (? . 27)) (? . 200) #t) ((? . 12) v! #f (? . 12) #f (? . 14) #f) ((c counter ? . 13) v! #f (c counter c (? . 45) ? . 13) #f (? . 14) #f) ((? . 15) v! #f (? . 15) #f (? . 8) #f) ((? . 16) v! (? . 131) (? . 16) (? . 214) (? . 34) #f) ((? . 17) v! (? . 133) (? . 17) (? . 347) (? . 8) #f) ((c counter c (c (? . 1) c (? . 172) ? . 2)) . 35) ((c index-entry c (? . 398)) c (c (? . 19)) c (c (2 #f (? . 399))) c (? . 20)) ((? . 21) v! #f (? . 21) #f (? . 22) #f) ((c counter ? . 23) v! #f (c counter c (? . 50) ? . 23) #f (? . 8) #f) ((c index-entry c (? . 402)) c (c (? . 24)) c (c (2 #f (? . 403))) c (? . 20)) ((c counter c (c (? . 11) c (? . 91) c (? . 25))) . 14) ((c counter c (c (? . 11) c (? . 413) c (? . 25))) . 4) ((c counter c (c (? . 11) c (? . 179) c (? . 25))) . 34) ((? . 26) v! (q "Systematic Program Design: A Worked Example") (? . 26) (c #f c #f c (? . 27)) (? . 40) #f) ((? . 28) v! #f (? . 28) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 246) c (? . 25))) . 12) ((c tech c (c (? . 29) c (? . 30))) v! #f (c tech c (? . 29) c (? . 30)) #f (? . 31) #f) ((c counter c (c (? . 1) c (? . 123) ? . 2)) . 6) ((? . 32) v! (? . 152) (? . 32) (c 1 ? . 33) (? . 34) #f) ((c counter ? . 35) v! #f (c counter c (? . 66) ? . 35) #f (? . 22) #f) ((c index-entry c (? . 410)) c (c (? . 36)) c (c (2 italic (? . 36))) q tech) ((? . 37) v! #f (? . 37) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 425) ? . 2)) . 19) ((c index-entry c (? . 411)) c (c (? . 38)) c (c (2 italic (? . 38))) q tech) ((? . 39) v! (q "Implementing Abstract Machines") (? . 39) (c #f c #f c (? . 27)) (? . 40) #f) ((? . 41) v! #f (? . 41) #f (? . 8) #f) ((c tech c (c (? . 42) c (? . 43))) v! #f (c tech c (? . 42) c (? . 43)) #f (? . 31) #f) ((c counter c (c (? . 1) c (? . 515) ? . 2)) . 73) ((c index-entry c (? . 415)) c (c (? . 44)) c (c (2 #f (? . 416))) c (? . 20)) ((c part c (c (? . 45) c (? . 46))) v! (? . 163) (c part c (? . 45) c (? . 46)) (c 1 ? . 55) (? . 14) #f) ((c index-entry c (? . 424)) c (c (? . 47)) c (c (2 italic (? . 47))) q tech) ((c counter c (c (? . 1) c (? . 520) ? . 2)) . 2) ((c counter ? . 48) v! #f (c counter c (? . 64) ? . 48) #f (? . 14) #f) ((c index-entry c (? . 429)) c (c (? . 49)) c (c (2 italic (? . 49))) q tech) ((c index-entry c (c part c (c (? . 50) c (? . 430)))) c (c (? . 51)) c (c (2 #f (? . 431))) c (? . 20)) ((c tech c (c (? . 52) c (? . 30))) v! #f (c tech c (? . 52) c (? . 30)) #f (? . 31) #f) ((c index-entry c (? . 438)) c (c (? . 53)) c (c (2 #f (? . 439))) c (? . 20)) ((c part c (c (? . 45) c (? . 54))) v! (? . 171) (c part c (? . 45) c (? . 54)) (? . 55) (? . 14) #f) ((c index-entry c (? . 436)) c (c (? . 56)) c (c (2 #f (? . 437))) c (? . 20)) ((c counter c (c (? . 11) c (? . 146) c (? . 25))) . 27) ((c counter ? . 57) v! #f (c counter c (? . 50) ? . 57) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 58) c (? . 25))) . 24) ((c counter c (c (? . 1) c (? . 59) ? . 2)) . 82) ((? . 60) v! #f (? . 60) #f (? . 40) #f) ((c index-entry c (c part c (c (? . 42) c (? . 446)))) c (c (? . 61)) c (c (2 #f (? . 447))) c (? . 20)) ((c tech c (c (? . 42) c (? . 62))) v! #f (c tech c (? . 42) c (? . 62)) #f (? . 31) #f) ((c part c (c (? . 29) c (? . 63))) v! (? . 185) (c part c (? . 29) c (? . 63)) (c 2 ? . 69) (? . 31) #f) ((c counter ? . 65) v! #f (c counter c (? . 64) ? . 65) #f (? . 14) #f) ((c counter ? . 67) v! #f (c counter c (? . 66) ? . 67) #f (? . 22) #f) ((? . 68) v! (? . 191) (? . 68) (? . 69) (? . 31) #t) ((c index-entry c (? . 449)) c (c (? . 70)) c (c (2 #f (? . 450))) c (? . 20)) ((? . 71) v! (? . 198) (? . 71) (c 3 ? . 88) (? . 89) #f) ((c counter c (c (? . 1) c (? . 229) ? . 2)) . 34) ((? . 72) v! #f (? . 72) #f (? . 14) #f) ((c part c (c (? . 64) c (? . 73))) v! (? . 205) (c part c (? . 64) c (? . 73)) (c 1 ? . 74) (? . 14) #f) ((? . 75) v! #f (? . 75) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 511) ? . 2)) . 49) ((c index-entry c (c tech c (c (? . 45) c (? . 76)))) c (c (? . 76)) c (c (2 italic (? . 76))) q tech) ((c tech c (c (? . 77) c (? . 43))) v! #f (c tech c (? . 77) c (? . 43)) #f (? . 31) #f) ((c counter c (c (? . 1) c (? . 117) ? . 2)) . 78) ((c counter ? . 78) v! #f (c counter c (? . 66) ? . 78) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 262) ? . 2)) . 21) ((c index-entry c (? . 472)) c (c (? . 79)) c (c (2 italic (? . 79))) q tech) ((c counter c (c (? . 1) c (? . 502) ? . 2)) . 33) ((c counter c (c (? . 1) c (? . 104) ? . 2)) . 47) ((c counter c (c (? . 1) c (? . 257) ? . 2)) . 15) ((? . 80) v! #f (? . 80) #f (? . 8) #f) ((c index-entry c (? . 480)) c (c (? . 81)) c (c (2 italic (? . 81))) q tech) ((c tech c (c (? . 82) c (? . 83))) v! #f (c tech c (? . 82) c (? . 83)) #f (? . 14) #f) ((c index-entry c (? . 483)) c (c (? . 84)) c (c (2 #f (? . 484))) c (? . 20)) ((? . 85) v! #f (? . 85) #f (? . 8) #f) ((? . 86) v! (q "Systematic Program Design: The Idea") (? . 86) (c #f c #f c (? . 27)) (? . 40) #f) ((? . 87) v! (? . 221) (? . 87) (c 4 ? . 88) (? . 89) #f) ((? . 90) v! #f (? . 90) #f (? . 34) #f) ((? . 92) v! #f (? . 92) #f (? . 8) #f) ((c index-entry c (? . 487)) c (c (? . 93)) c (c (2 #f (? . 488))) c (? . 20)) ((c tech c (c (? . 77) c (? . 62))) v! #f (c tech c (? . 77) c (? . 62)) #f (? . 31) #f) ((? . 94) v! #f (? . 94) #f (? . 14) #f) ((c counter ? . 95) v! #f (c counter c (? . 66) ? . 95) #f (? . 22) #f) ((? . 96) v! #f (? . 96) #f (? . 34) #f) ((c counter c (c (? . 11) c (? . 195) c (? . 25))) . 7) ((c counter ? . 97) v! #f (c counter c (? . 66) ? . 97) #f (? . 22) #f) ((? . 98) v! #f (? . 98) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 99) ? . 2)) . 4) ((c index-entry c (? . 494)) c (c (? . 100)) c (c (2 #f (? . 495))) c (? . 20)) ((c index-entry c (? . 498)) c (c (? . 101)) c (c (2 italic (? . 101))) q tech) ((c tech c (c (? . 29) c (? . 43))) v! #f (c tech c (? . 29) c (? . 43)) #f (? . 31) #f) ((? . 102) v! #f (? . 102) #f (? . 22) #f) ((? . 103) v! (? . 232) (? . 103) (c 6 ? . 18) (? . 8) #f) ((? . 105) v! #f (? . 105) #f (? . 34) #f) ((c counter ? . 106) v! #f (c counter c (? . 42) ? . 106) #f (? . 31) #f) ((c counter ? . 107) v! #f (c counter c (? . 29) ? . 107) #f (? . 31) #f) ((c part c (c (? . 77) c (? . 108))) v! (? . 234) (c part c (? . 77) c (? . 108)) (c 3 ? . 69) (? . 31) #f) ((c counter c (c (? . 1) c (? . 109) ? . 2)) . 45) ((? . 110) v! (? . 239) (? . 110) (c 1 ? . 145) (? . 22) #f) ((c index-entry c (? . 506)) c (c (? . 111)) c (c (2 italic (? . 111))) q tech) ((c counter c (c (? . 1) c (? . 492) ? . 2)) . 83) ((c tech c (c (? . 45) c (? . 112))) v! #f (c tech c (? . 45) c (? . 112)) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 489) ? . 2)) . 20) ((c counter c (c (? . 1) c (? . 417) ? . 2)) . 17) ((? . 113) v! #f (? . 113) #f (? . 8) #f) ((c index-entry c (c tech c (c (? . 82) c (? . 517)))) c (c (? . 114)) c (c (2 italic (? . 114))) q tech) ((c counter c (c (? . 1) c (? . 406) ? . 2)) . 69) ((? . 115) v! #f (? . 115) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 368) ? . 2)) . 71) ((c counter c (c (? . 11) c (? . 116) c (? . 25))) . 22) ((c index-entry c (c tech c (c (? . 77) c (? . 30)))) c (c (? . 30)) c (c (2 italic (? . 30))) q tech) ((c counter ? . 118) v! #f (c counter c (? . 29) ? . 118) #f (? . 31) #f) ((c tech c (c (? . 29) c (? . 62))) v! #f (c tech c (? . 29) c (? . 62)) #f (? . 31) #f) ((c tech c (c (? . 52) c (? . 43))) v! #f (c tech c (? . 52) c (? . 43)) #f (? . 31) #f) ((c counter ? . 119) v! #f (c counter c (? . 45) ? . 119) #f (? . 14) #f) ((? . 120) v! #f (? . 120) #f (? . 14) #f) ((c counter c (c (? . 11) c (? . 209) c (? . 25))) . 25) ((c index-entry c (? . 0)) c (c (? . 121)) c (c (2 #f (? . 122))) c (? . 20)) ((? . 124) v! #f (? . 124) #f (? . 8) #f) ((c tech c (c (? . 45) c (? . 43))) v! #f (c tech c (? . 45) c (? . 43)) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 222) ? . 2)) . 65) ((? . 125) v! #f (? . 125) #f (? . 34) #f) ((c index-entry c (? . 7)) c (c (? . 126)) c (c (2 italic (? . 126))) q tech) ((c counter ? . 127) v! #f (c counter c (? . 45) ? . 127) #f (? . 14) #f) ((? . 128) v! #f (? . 128) #f (? . 14) #f) ((c counter ? . 129) v! #f (c counter c (? . 45) ? . 129) #f (? . 14) #f) ((c index-entry c (? . 16)) c (c (? . 130)) c (c (2 #f (? . 131))) c (? . 20)) ((c counter c (c (? . 1) c (? . 359) ? . 2)) . 26) ((c index-entry c (? . 17)) c (c (? . 132)) c (c (2 #f (? . 133))) c (? . 20)) ((? . 134) v! #f (? . 134) #f (? . 34) #f) ((c counter c (c (? . 1) c (? . 135) ? . 2)) . 8) ((? . 136) v! #f (? . 136) #f (? . 22) #f) ((? . 137) v! #f (? . 137) #f (? . 14) #f) ((? . 138) v! #f (? . 138) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 139) ? . 2)) . 60) ((c tech c (c (? . 52) c (? . 62))) v! #f (c tech c (? . 52) c (? . 62)) #f (? . 31) #f) ((? . 140) v! #f (? . 140) #f (? . 8) #f) ((? . 141) v! #f (? . 141) #f (? . 34) #f) ((? . 142) v! #f (? . 142) #f (? . 34) #f) ((c counter c (c (? . 1) c (? . 331) ? . 2)) . 1) ((? . 143) v! (? . 279) (? . 143) (c 5 ? . 88) (? . 89) #f) ((? . 144) v! (? . 277) (? . 144) (c 6 ? . 145) (? . 22) #f) ((? . 147) v! #f (? . 147) #f (? . 34) #f) ((c counter c (c (? . 1) c (? . 148) ? . 2)) . 53) ((? . 149) v! #f (? . 149) #f (? . 8) #f) ((c index-entry c (c tech c (c (? . 29) c (? . 30)))) c (c (? . 30)) c (c (2 italic (? . 30))) q tech) ((? . 150) v! #f (? . 150) #f (? . 8) #f) ((c index-entry c (? . 32)) c (c (? . 151)) c (c (2 #f (? . 152))) c (? . 20)) ((? . 153) v! #f (? . 153) #f (? . 8) #f) ((? . 154) v! (q "Text versus Data") (? . 154) (c #f c #f c (? . 27)) (? . 40) #f) ((c index-entry c (? . 37)) c (c (? . 155)) c (c (2 italic (? . 155))) q tech) ((? . 156) v! #f (? . 156) #f (? . 89) #f) ((? . 157) v! #f (? . 157) #f (? . 8) #f) ((c index-entry c (? . 41)) c (c (? . 158)) c (c (2 italic (? . 158))) q tech) ((c index-entry c (c tech c (c (? . 42) c (? . 43)))) c (c (? . 43)) c (c (2 italic (? . 43))) q tech) ((? . 159) v! #f (? . 159) #f (? . 22) #f) ((? . 160) v! (? . 290) (? . 160) (c 7 ? . 18) (? . 8) #f) ((? . 161) v! (? . 293) (? . 161) (c 3 ? . 145) (? . 22) #f) ((c index-entry c (c part c (c (? . 45) c (? . 46)))) c (c (? . 162)) c (c (2 #f (? . 163))) c (? . 20)) ((? . 164) v! #f (? . 164) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 165) ? . 2)) . 58) ((? . 166) v! #f (? . 166) #f (? . 34) #f) ((? . 167) v! #f (? . 167) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 168) ? . 2)) . 39) ((c index-entry c (c tech c (c (? . 52) c (? . 30)))) c (c (? . 30)) c (c (2 italic (? . 30))) q tech) ((c counter ? . 169) v! #f (c counter c (? . 52) ? . 169) #f (? . 31) #f) ((c index-entry c (c part c (c (? . 45) c (? . 54)))) c (c (? . 170)) c (c (2 #f (? . 171))) c (? . 20)) ((? . 173) v! #f (? . 173) #f (? . 22) #f) ((c counter c (c (? . 11) c (? . 385) c (? . 25))) . 28) ((? . 174) v! #f (? . 174) #f (? . 22) #f) ((? . 175) v! (? . 308) (? . 175) (? . 145) (? . 22) #t) ((? . 176) v! #f (? . 176) #f (? . 8) #f) ((? . 177) v! (? . 311) (? . 177) (c 1 ? . 88) (? . 89) #f) ((? . 178) v! (? . 314) (? . 178) (q 9) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_types.html" . unix) #t) ((? . 180) v! #f (? . 180) #f (? . 14) #f) ((? . 181) v! #f (? . 181) #f (? . 34) #f) ((? . 182) v! #f (? . 182) #f (? . 40) #f) ((c index-entry c (c tech c (c (? . 42) c (? . 62)))) c (c (? . 183)) c (c (2 italic (? . 183))) q tech) ((c index-entry c (c part c (c (? . 29) c (? . 63)))) c (c (? . 184)) c (c (2 #f (? . 185))) c (? . 20)) ((? . 186) v! #f (? . 186) #f (? . 14) #f) ((? . 187) v! () (? . 187) (c #f c (? . 27)) (? . 40) #f) ((c counter c (c (? . 1) c (? . 188) ? . 2)) . 38) ((c tech c (c (? . 45) c (? . 27))) v! #f (c tech c (? . 45) c (? . 27)) #f (? . 14) #f) ((? . 189) v! #f (? . 189) #f (? . 8) #f) ((c index-entry c (? . 68)) c (c (? . 190)) c (c (2 #f (? . 191))) c (? . 20)) ((? . 192) v! (? . 321) (? . 192) (c 1 ? . 345) (? . 22) #f) ((c counter ? . 193) v! #f (c counter c (? . 52) ? . 193) #f (? . 31) #f) ((? . 194) v! #f (? . 194) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 454) ? . 2)) . 56) ((? . 196) v! #f (? . 196) #f (? . 40) #f) ((c index-entry c (? . 71)) c (c (? . 197)) c (c (2 #f (? . 198))) c (? . 20)) ((? . 199) v! () (? . 199) (c #f c (? . 27)) (? . 200) #f) ((? . 201) v! (? . 329) (? . 201) (c 4 ? . 33) (? . 34) #f) ((c counter ? . 203) v! #f (c counter c (? . 42) ? . 203) #f (? . 31) #f) ((c index-entry c (c part c (c (? . 64) c (? . 73)))) c (c (? . 204)) c (c (2 #f (? . 205))) c (? . 20)) ((? . 206) v! #f (? . 206) #f (? . 34) #f) ((c part c (c (? . 82) c (? . 207))) v! (? . 330) (c part c (? . 82) c (? . 207)) (c 6 ? . 74) (? . 14) #f) ((c counter c (c (? . 1) c (? . 248) ? . 2)) . 44) ((c counter c (c (? . 11) c (? . 208) c (? . 25))) . 17) ((c index-entry c (c tech c (c (? . 77) c (? . 43)))) c (c (? . 43)) c (c (2 italic (? . 43))) q tech) ((c tech c (c (? . 64) c (? . 43))) v! #f (c tech c (? . 64) c (? . 43)) #f (? . 14) #f) ((? . 210) v! #f (? . 210) #f (? . 22) #f) ((c counter c (c (? . 11) c (? . 371) c (? . 25))) . 26) ((c counter c (c (? . 11) c (? . 434) c (? . 25))) . 30) ((c counter c (c (? . 1) c (? . 211) ? . 2)) . 37) ((? . 212) v! #f (? . 212) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 299) ? . 2)) . 13) ((? . 213) v! (? . 343) (? . 213) (c 1 ? . 214) (? . 34) #f) ((c index-entry c (c tech c (c (? . 82) c (? . 83)))) c (c (? . 215)) c (c (2 italic (? . 215))) q tech) ((? . 216) v! #f (? . 216) #f (? . 34) #f) ((c counter c (c (? . 1) c (? . 217) ? . 2)) . 55) ((? . 219) v! (? . 348) (? . 219) (? . 18) (? . 8) #t) ((c index-entry c (? . 87)) c (c (? . 220)) c (c (2 #f (? . 221))) c (? . 20)) ((? . 223) v! #f (? . 223) #f (? . 14) #f) ((c index-entry c (c tech c (c (? . 77) c (? . 62)))) c (c (? . 183)) c (c (2 italic (? . 183))) q tech) ((c counter ? . 224) v! #f (c counter c (? . 52) ? . 224) #f (? . 31) #f) ((c tech c (c (? . 64) c (? . 62))) v! #f (c tech c (? . 64) c (? . 62)) #f (? . 14) #f) ((c index-entry c (? . 96)) c (c (? . 225)) c (c (2 italic (? . 225))) q tech) ((c index-entry c (? . 98)) c (c (? . 226)) c (c (2 italic (? . 226))) q tech) ((c counter c (c (? . 11) c (? . 387) c (? . 25))) . 39) ((c counter c (c (? . 11) c (? . 227) c (? . 25))) . 9) ((? . 228) v! (? . 353) (? . 228) (c 7 ? . 145) (? . 22) #f) ((? . 230) v! #f (? . 230) #f (? . 22) #f) ((c index-entry c (c tech c (c (? . 29) c (? . 43)))) c (c (? . 43)) c (c (2 italic (? . 43))) q tech) ((c index-entry c (? . 103)) c (c (? . 231)) c (c (2 #f (? . 232))) c (? . 20)) ((c index-entry c (c part c (c (? . 77) c (? . 108)))) c (c (? . 233)) c (c (2 #f (? . 234))) c (? . 20)) ((c part c (c (? . 45) c (? . 235))) v! (? . 355) (c part c (? . 45) c (? . 235)) (c 2 ? . 55) (? . 14) #f) ((? . 236) v! #f (? . 236) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 237) ? . 2)) . 51) ((c index-entry c (? . 110)) c (c (? . 238)) c (c (2 #f (? . 239))) c (? . 20)) ((c counter c (c (? . 1) c (? . 240) ? . 2)) . 86) ((c index-entry c (c tech c (c (? . 45) c (? . 112)))) c (c (? . 112)) c (c (2 italic (? . 112))) q tech) ((c counter c (c (? . 1) c (? . 241) ? . 2)) . 66) ((c counter c (c (? . 1) c (? . 242) ? . 2)) . 68) ((c counter c (c (? . 1) c (? . 475) ? . 2)) . 59) ((c counter c (c (? . 11) c (? . 243) c (? . 25))) . 23) ((c tech c (c (? . 45) c (? . 244))) v! #f (c tech c (? . 45) c (? . 244)) #f (? . 14) #f) ((? . 245) v! #f (? . 245) #f (? . 34) #f) ((? . 247) v! #f (? . 247) #f (? . 8) #f) ((c index-entry c (c tech c (c (? . 29) c (? . 62)))) c (c (? . 183)) c (c (2 italic (? . 183))) q tech) ((? . 249) v! #f (? . 249) #f (? . 22) #f) ((c index-entry c (c tech c (c (? . 52) c (? . 43)))) c (c (? . 43)) c (c (2 italic (? . 43))) q tech) ((? . 250) v! #f (? . 250) #f (? . 8) #f) ((? . 251) v! (? . 374) (? . 251) (c 6 ? . 88) (? . 89) #f) ((c part c (c (? . 45) c (? . 252))) v! (? . 377) (c part c (? . 45) c (? . 252)) (c 3 ? . 55) (? . 14) #f) ((c counter c (c (? . 1) c (? . 318) ? . 2)) . 63) ((c index-entry c (c tech c (c (? . 45) c (? . 43)))) c (c (? . 253)) c (c (2 italic (? . 253))) q tech) ((? . 254) v! #f (? . 254) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 255) ? . 2)) . 30) ((c tech c (c (? . 50) c (? . 256))) v! #f (c tech c (? . 50) c (? . 256)) #f (? . 8) #f) ((? . 258) v! #f (? . 258) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 522) ? . 2)) . 52) ((c counter c (c (? . 1) c (? . 264) ? . 2)) . 41) ((? . 260) v! #f (? . 260) #f (? . 14) #f) ((c tech c (c (? . 66) c (? . 43))) v! #f (c tech c (? . 66) c (? . 43)) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 261) ? . 2)) . 9) ((c counter ? . 263) v! #f (c counter c (? . 50) ? . 263) #f (? . 8) #f) ((? . 265) v! #f (? . 265) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 524) ? . 2)) . 46) ((c index-entry c (? . 134)) c (c (? . 266)) c (c (2 italic (? . 266))) q tech) ((c counter c (c (? . 1) c (? . 366) ? . 2)) . 11) ((? . 267) v! (? . 392) (? . 267) (q 7) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_express.html" . unix) #t) ((c counter c (c (? . 1) c (? . 268) ? . 2)) . 36) ((? . 270) v! #f (? . 270) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 271) ? . 2)) . 50) ((c counter c (c (? . 1) c (? . 272) ? . 2)) . 85) ((? . 273) v! (? . 397) (? . 273) (c 5 ? . 69) (? . 31) #f) ((c index-entry c (c tech c (c (? . 52) c (? . 62)))) c (c (? . 183)) c (c (2 italic (? . 183))) q tech) ((? . 274) v! (q "Acknowledgment") (? . 274) (c #f c #f c (? . 27)) (? . 282) #f) ((c counter c (c (? . 11) c (? . 275) c (? . 25))) . 19) ((c index-entry c (? . 144)) c (c (? . 276)) c (c (2 #f (? . 277))) c (? . 20)) ((c index-entry c (? . 143)) c (c (? . 278)) c (c (2 #f (? . 279))) c (? . 20)) ((c index-entry c (? . 149)) c (c (? . 280)) c (c (2 italic (? . 280))) q tech) ((? . 281) v! (q "Abstract State Machines") (? . 281) (c #f c #f c (? . 27)) (? . 282) #f) ((c counter c (c (? . 11) c (? . 283) c (? . 25))) . 11) ((? . 285) v! #f (? . 285) #f (? . 22) #f) ((c counter ? . 286) v! #f (c counter c (? . 29) ? . 286) #f (? . 31) #f) ((c index-entry c (? . 157)) c (c (? . 287)) c (c (2 italic (? . 287))) q tech) ((c index-entry c (? . 159)) c (c (? . 288)) c (c (2 italic (? . 288))) q tech) ((c index-entry c (? . 160)) c (c (? . 289)) c (c (2 #f (? . 290))) c (? . 20)) ((c tech c (c (? . 45) c (? . 291))) v! #f (c tech c (? . 45) c (? . 291)) #f (? . 14) #f) ((c index-entry c (? . 161)) c (c (? . 292)) c (c (2 #f (? . 293))) c (? . 20)) ((c counter c (c (? . 11) c (? . 294) c (? . 25))) . 36) ((c counter c (c (? . 1) c (? . 496) ? . 2)) . 74) ((c index-entry c (? . 164)) c (c (? . 295)) c (c (2 italic (? . 295))) q tech) ((? . 297) v! #f (? . 297) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 298) ? . 2)) . 28) ((? . 300) v! #f (? . 300) #f (? . 8) #f) ((c index-entry c (? . 167)) c (c (? . 301)) c (c (2 italic (? . 301))) q tech) ((c counter c (c (? . 11) c (? . 302) c (? . 25))) . 29) ((c index-entry c (? . 166)) c (c (? . 303)) c (c (2 italic (? . 303))) q tech) ((? . 304) v! #f (? . 304) #f (? . 40) #f) ((? . 305) v! (? . 423) (? . 305) (c 3 ? . 18) (? . 8) #f) ((c counter c (c (? . 11) c (? . 306) c (? . 25))) . 32) ((c counter c (c (? . 1) c (? . 307) ? . 2)) . 84) ((c index-entry c (? . 175)) c (q "Algebra, Your Second Programming Language") c (c (2 #f (? . 308))) c (? . 20)) ((c index-entry c (? . 174)) c (c (? . 309)) c (c (2 italic (? . 309))) q tech) ((c index-entry c (? . 177)) c (c (? . 310)) c (c (2 #f (? . 311))) c (? . 20)) ((c counter c (c (? . 1) c (? . 312) ? . 2)) . 61) ((c index-entry c (? . 178)) c (c (? . 313)) c (c (2 #f (? . 314))) c (? . 20)) ((c index-entry c (? . 182)) c (c (? . 315)) c (c (2 italic (? . 315))) q tech) ((c index-entry c (c tech c (c (? . 45) c (? . 27)))) c (c (? . 316)) c (c (2 italic (? . 316))) q tech) ((? . 317) v! #f (? . 317) #f (? . 8) #f) ((? . 319) v! #f (? . 319) #f (? . 14) #f) ((c index-entry c (? . 192)) c (c (? . 320)) c (c (2 #f (? . 321))) c (? . 20)) ((c counter c (c (? . 1) c (? . 322) ? . 2)) . 40) ((? . 323) v! (q "Prologue") (? . 323) (c (? . 27)) (? . 40) #t) ((c counter c (c (? . 1) c (? . 462) ? . 2)) . 24) ((c tech c (c (? . 45) c (? . 324))) v! #f (c tech c (? . 45) c (? . 324)) #f (? . 14) #f) ((c counter ? . 325) v! #f (c counter c (? . 42) ? . 325) #f (? . 31) #f) ((c counter ? . 326) v! #f (c counter c (? . 66) ? . 326) #f (? . 22) #f) ((c counter c (c (? . 11) c (? . 327) c (? . 25))) . 21) ((c index-entry c (? . 201)) c (c (? . 328)) c (c (2 #f (? . 329))) c (? . 20)) ((c index-entry c (c part c (c (? . 82) c (? . 207)))) c (c (? . 24)) c (c (2 #f (? . 330))) c (? . 20)) ((? . 332) v! #f (? . 332) #f (? . 40) #f) ((? . 333) v! #f (? . 333) #f (? . 8) #f) ((c index-entry c (c tech c (c (? . 64) c (? . 43)))) c (c (? . 43)) c (c (2 italic (? . 43))) q tech) ((? . 334) v! (? . 457) (? . 334) (c 2 ? . 145) (? . 22) #f) ((? . 335) v! (? . 460) (? . 335) (? . 74) (? . 14) #t) ((c tech c (c (? . 66) c (? . 336))) v! #f (c tech c (? . 66) c (? . 336)) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 269) ? . 2)) . 12) ((? . 337) v! (? . 464) (? . 337) (? . 33) (? . 34) #t) ((c index-entry c (? . 212)) c (c (? . 338)) c (c (2 italic (? . 338))) q tech) ((? . 339) v! (? . 465) (? . 339) (c 8 ? . 18) (? . 8) #f) ((c counter c (c (? . 11) c (? . 440) c (? . 25))) . 6) ((? . 340) v! (? . 466) (? . 340) (c 5 ? . 33) (? . 34) #f) ((c counter c (c (? . 1) c (? . 419) ? . 2)) . 31) ((c counter c (c (? . 1) c (? . 341) ? . 2)) . 80) ((c index-entry c (? . 213)) c (c (? . 342)) c (c (2 #f (? . 343))) c (? . 20)) ((c counter c (c (? . 1) c (? . 513) ? . 2)) . 81) ((? . 344) v! (? . 469) (? . 344) (? . 345) (? . 22) #f) ((? . 346) v! (? . 471) (? . 346) (c 1 ? . 347) (? . 8) #f) ((c index-entry c (? . 219)) c (q "Arithmetic, Your First Programming Language") c (c (2 #f (? . 348))) c (? . 20)) ((? . 349) v! #f (? . 349) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 389) ? . 2)) . 70) ((c counter c (c (? . 1) c (? . 350) ? . 2)) . 5) ((c counter c (c (? . 1) c (? . 351) ? . 2)) . 7) ((c index-entry c (c tech c (c (? . 64) c (? . 62)))) c (c (? . 183)) c (c (2 italic (? . 183))) q tech) ((c counter c (c (? . 1) c (? . 382) ? . 2)) . 25) ((c counter c (c (? . 1) c (? . 352) ? . 2)) . 29) ((c index-entry c (? . 228)) c (c (? . 24)) c (c (2 #f (? . 353))) c (? . 20)) ((c index-entry c (c part c (c (? . 45) c (? . 235)))) c (c (? . 354)) c (c (2 #f (? . 355))) c (? . 20)) ((? . 356) v! #f (? . 356) #f (? . 8) #f) ((c tech c (c (? . 82) c (? . 357))) v! #f (c tech c (? . 82) c (? . 357)) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 358) ? . 2)) . 79) ((? . 360) v! #f (? . 360) #f (? . 8) #f) ((? . 361) v! () (? . 361) (c #f c (? . 27)) (? . 282) #f) ((c index-entry c (? . 245)) c (c (? . 362)) c (c (2 italic (? . 362))) q tech) ((c counter c (c (? . 1) c (? . 363) ? . 2)) . 48) ((c index-entry c (c tech c (c (? . 45) c (? . 244)))) c (c (? . 244)) c (c (2 italic (? . 244))) q tech) ((? . 364) v! (? . 510) (? . 364) (c 3 ? . 33) (? . 34) #f) ((? . 365) v! #f (? . 365) #f (? . 34) #f) ((? . 367) v! #f (? . 367) #f (? . 8) #f) ((c counter ? . 369) v! #f (c counter c (? . 45) ? . 369) #f (? . 14) #f) ((c counter c (c (? . 11) c (? . 370) c (? . 25))) . 31) ((? . 372) v! #f (? . 372) #f (? . 22) #f) ((c index-entry c (? . 251)) c (c (? . 373)) c (c (2 #f (? . 374))) c (? . 20)) ((c counter c (c (? . 11) c (? . 375) c (? . 25))) . 37) ((c index-entry c (c part c (c (? . 45) c (? . 252)))) c (c (? . 376)) c (c (2 #f (? . 377))) c (? . 20)) ((c index-entry c (? . 254)) c (c (? . 378)) c (c (2 italic (? . 378))) q tech) ((c part c (c (? . 52) c (? . 379))) v! (? . 380) (c part c (? . 52) c (? . 379)) (c 4 ? . 69) (? . 31) #f) ((c index-entry c (c tech c (c (? . 50) c (? . 256)))) c (c (? . 381)) c (c (2 italic (? . 381))) q tech) ((? . 383) v! #f (? . 383) #f (? . 8) #f) ((? . 384) v! #f (? . 384) #f (? . 8) #f) ((c index-entry c (c tech c (c (? . 66) c (? . 43)))) c (c (? . 253)) c (c (2 italic (? . 253))) q tech) ((? . 386) v! #f (? . 386) #f (? . 34) #f) ((c counter ? . 388) v! #f (c counter c (? . 45) ? . 388) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 393) ? . 2)) . 23) ((c counter ? . 390) v! #f (c counter c (? . 45) ? . 390) #f (? . 14) #f) ((c index-entry c (? . 267)) c (c (? . 391)) c (c (2 #f (? . 392))) c (? . 20)) ((? . 394) v! #f (? . 394) #f (? . 8) #f) ((c counter c (c (? . 1) c (? . 395) ? . 2)) . 10) ((c counter c (c (? . 1) c (? . 396) ? . 2)) . 3) ((c index-entry c (? . 273)) c (c (? . 24)) c (c (2 #f (? . 397))) c (? . 20)) ((? . 398) v! (? . 399) (? . 398) (q 10) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_futures.html" . unix) #t) ((c counter c (c (? . 1) c (? . 400) ? . 2)) . 67) ((c counter c (c (? . 1) c (? . 401) ? . 2)) . 27) ((? . 402) v! (? . 403) (? . 402) (c 7 ? . 88) (? . 89) #f) ((? . 404) v! #f (? . 404) #f (? . 40) #f) ((c part c (c (? . 66) c (? . 405))) v! (q "The Meaning of Variable Definitions") (c part c (? . 66) c (? . 405)) (c 4 ? . 145) (? . 22) #f) ((c counter ? . 407) v! #f (c counter c (? . 45) ? . 407) #f (? . 14) #f) ((? . 408) v! #f (? . 408) #f (? . 14) #f) ((c counter c (c (? . 1) c (? . 481) ? . 2)) . 32) ((? . 409) v! (q "Machines and Programming Languages") (? . 409) () (p+ #"../ppl-web/docs/2020-7-21/Book/index.html" . unix) #t) ((? . 410) v! #f (? . 410) #f (? . 22) #f) ((c index-entry c (c tech c (c (? . 45) c (? . 291)))) c (c (? . 126)) c (c (2 italic (? . 126))) q tech) ((? . 411) v! #f (? . 411) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 412) c (? . 25))) . 35) ((c counter c (c (? . 11) c (? . 432) c (? . 25))) . 3) ((? . 414) v! #f (? . 414) #f (? . 40) #f) ((? . 415) v! (? . 416) (? . 415) (? . 88) (? . 89) #t) ((? . 418) v! #f (? . 418) #f (? . 8) #f) ((? . 420) v! #f (? . 420) #f (? . 22) #f) ((c counter c (c (? . 11) c (? . 421) c (? . 25))) . 33) ((c counter c (c (? . 11) c (? . 269) c (? . 25))) . 10) ((c index-entry c (? . 305)) c (c (? . 422)) c (c (2 #f (? . 423))) c (? . 20)) ((? . 424) v! #f (? . 424) #f (? . 8) #f) ((c counter ? . 426) v! #f (c counter c (? . 50) ? . 426) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 427) c (? . 25))) . 38) ((c counter c (c (? . 1) c (? . 428) ? . 2)) . 57) ((? . 429) v! #f (? . 429) #f (? . 22) #f) ((c part c (c (? . 50) c (? . 430))) v! (? . 431) (c part c (? . 50) c (? . 430)) (c 4 ? . 18) (? . 8) #f) ((? . 433) v! #f (? . 433) #f (? . 40) #f) ((? . 435) v! #f (? . 435) #f (? . 34) #f) ((? . 436) v! (? . 437) (? . 436) (c 3 ? . 74) (? . 14) #f) ((? . 438) v! (? . 439) (? . 438) (q 8) (p+ #"../ppl-web/docs/2020-7-21/Book/ch_space.html" . unix) #t) ((? . 441) v! #f (? . 441) #f (? . 40) #f) ((? . 442) v! (q "Preface") (? . 442) (c (? . 27)) (? . 282) #t) ((? . 443) v! (c (? . 44)) (? . 443) (c #f c #f c (? . 27)) (? . 282) #f) ((c counter c (c (? . 11) c (? . 444) c (? . 25))) . 8) ((c counter c (c (? . 11) c (? . 445) c (? . 25))) . 5) ((c part c (c (? . 42) c (? . 446))) v! (? . 447) (c part c (? . 42) c (? . 446)) (c 1 ? . 69) (? . 31) #f) ((c index-entry c (c tech c (c (? . 45) c (? . 324)))) c (c (? . 448)) c (c (2 italic (? . 448))) q tech) ((? . 449) v! (? . 450) (? . 449) (c 4 ? . 74) (? . 14) #f) ((c counter c (c (? . 1) c (? . 451) ? . 2)) . 18) ((? . 452) v! (q "Programmnng, Debugging Systematically") (? . 452) (c #f c #f c (? . 27)) (? . 40) #f) ((c counter c (c (? . 1) c (? . 453) ? . 2)) . 42) ((c counter c (c (? . 11) c (? . 477) c (? . 25))) . 18) ((c counter ? . 455) v! #f (c counter c (? . 64) ? . 455) #f (? . 14) #f) ((c index-entry c (? . 334)) c (c (? . 456)) c (c (2 #f (? . 457))) c (? . 20)) ((? . 458) v! #f (? . 458) #f (? . 22) #f) ((c index-entry c (? . 335)) c (c (? . 459)) c (c (2 #f (? . 460))) c (? . 20)) ((c index-entry c (c tech c (c (? . 66) c (? . 336)))) c (c (? . 461)) c (c (2 italic (? . 461))) q tech) ((? . 463) v! #f (? . 463) #f (? . 8) #f) ((c index-entry c (? . 337)) c (c (? . 151)) c (c (2 #f (? . 464))) c (? . 20)) ((c tech c (c (? . 45) c (? . 76))) v! #f (c tech c (? . 45) c (? . 76)) #f (? . 14) #f) ((c index-entry c (? . 339)) c (c (? . 24)) c (c (2 #f (? . 465))) c (? . 20)) ((c index-entry c (? . 340)) c (c (? . 24)) c (c (2 #f (? . 466))) c (? . 20)) ((? . 467) v! #f (? . 467) #f (? . 8) #f) ((c index-entry c (? . 344)) c (c (? . 468)) c (c (2 #f (? . 469))) c (? . 20)) ((c index-entry c (? . 346)) c (c (? . 470)) c (c (2 #f (? . 471))) c (? . 20)) ((? . 472) v! #f (? . 472) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 473) ? . 2)) . 54) ((c counter c (c (? . 1) c (? . 474) ? . 2)) . 77) ((? . 476) v! #f (? . 476) #f (? . 14) #f) ((? . 478) v! #f (? . 478) #f (? . 8) #f) ((? . 479) v! (q "Abstract Machines") (? . 479) (c #f c #f c (? . 27)) (? . 40) #f) ((? . 480) v! #f (? . 480) #f (? . 34) #f) ((? . 482) v! #f (? . 482) #f (? . 22) #f) ((? . 483) v! (? . 484) (? . 483) (c 1 ? . 18) (? . 8) #f) ((c counter c (c (? . 11) c (? . 485) c (? . 25))) . 13) ((? . 486) v! (q "To the Instructor") (? . 486) (c #f c #f c (? . 27)) (? . 282) #f) ((? . 487) v! (? . 488) (? . 487) (c 2 ? . 74) (? . 14) #f) ((c counter ? . 490) v! #f (c counter c (? . 50) ? . 490) #f (? . 8) #f) ((c counter c (c (? . 11) c (? . 491) c (? . 25))) . 16) ((c counter ? . 493) v! #f (c counter c (? . 77) ? . 493) #f (? . 31) #f) ((? . 494) v! (? . 495) (? . 494) (c 2 ? . 88) (? . 89) #f) ((c counter ? . 497) v! #f (c counter c (? . 45) ? . 497) #f (? . 14) #f) ((? . 498) v! #f (? . 498) #f (? . 34) #f) ((? . 499) v! (q "Programming") (? . 499) (c #f c #f c (? . 27)) (? . 282) #f) ((c counter c (c (? . 1) c (? . 500) ? . 2)) . 16) ((c index-entry c (? . 356)) c (c (? . 501)) c (c (2 italic (? . 501))) q tech) ((? . 503) v! #f (? . 503) #f (? . 22) #f) ((c index-entry c (c tech c (c (? . 82) c (? . 357)))) c (c (? . 266)) c (c (2 italic (? . 266))) q tech) ((c counter c (c (? . 11) c (? . 504) c (? . 25))) . 20) ((c counter c (c (? . 1) c (? . 505) ? . 2)) . 14) ((? . 506) v! #f (? . 506) #f (? . 22) #f) ((c counter c (c (? . 1) c (? . 507) ? . 2)) . 72) ((c counter c (c (? . 1) c (? . 508) ? . 2)) . 22) ((c index-entry c (? . 364)) c (c (? . 509)) c (c (2 #f (? . 510))) c (? . 20)) ((? . 512) v! #f (? . 512) #f (? . 34) #f) ((c counter ? . 514) v! #f (c counter c (? . 77) ? . 514) #f (? . 31) #f) ((c index-entry c (? . 365)) c (c (? . 215)) c (c (2 italic (? . 215))) q tech) ((c counter ? . 516) v! #f (c counter c (? . 45) ? . 516) #f (? . 14) #f) ((c tech c (c (? . 82) c (? . 517))) v! #f (c tech c (? . 82) c (? . 517)) #f (? . 14) #f) ((c counter c (c (? . 11) c (? . 518) c (? . 25))) . 15) ((c counter c (c (? . 1) c (? . 519) ? . 2)) . 76) ((? . 521) v! #f (? . 521) #f (? . 40) #f) ((c tech c (c (? . 77) c (? . 30))) v! #f (c tech c (? . 77) c (? . 30)) #f (? . 31) #f) ((? . 523) v! #f (? . 523) #f (? . 34) #f) ((? . 525) v! #f (? . 525) #f (? . 22) #f)))