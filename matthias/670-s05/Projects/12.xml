<week>
<assignment due="4/08 @ 5pm">

<p><b>Objective:</b> to develop some basic understanding of distributed
  programming via the remote proxy pattern</p>

<hr />

<p><b>Background:</b> The modern world needs distributed computing. In this
world, a system consists of many components that communicate via message
exchanges, which typically correspond to method calls and returns. People tend
to call ordering and formatting of these message exchanges a "protocol". 
</p>

<p>Over the past few years, XML has emerged as the dominant format for these
messages. You can find abbreviations such as SOAP, XML RPC, etc. when you look
for distributed protocols. Not all languages have bindings for libraries that
support these protocols so I have decided to have you implement one from
scratch. 
</p>

<hr />

<p><b>Protocol:</b> (interaction diagrams for remote proxy communication) The
following suggestive interaction diagrams show how the game administrator might
communicate with the players. The diagrams are refinements of your game (or what
yours should have looked like) that include hints on how the distributed game
works. Do <em>not</em> take these diagrams as accurate dedscriptions of how my
server works or how your server should work.
</p>

<p>Each diagram comes with a definition of the format th
</p>

<ol>
<li>Use case: a player registers with the administrator  

<p>This diagram specifies how players register with the game administrator
  in the local case:</p>

<pre>
<code>
<font size="-1">
 admin                                          player 
  |                             register(name)    |    
  | &lt;-------------------------------------------- |    
  |                                               |    
  |  ret:follower or false                        |    
  | --------------------------------------------> |    
  |                                               |    
</font>
</code>
</pre>

<p>The player sends a message to the administrator and receives either a
  follower (a string denoting a color) or false in return. </p>

<p>Using the remote proxy pattern the interplay looks slightly different:</p>

<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin                   server             proxy-admin player 
  |                        |                      |    |    
  |                        |                      |    |    
  |    proxy-player new(p) |    register(name)    |    |    
  |              | &lt;------ | &lt;------------------- | &lt;- |    
  |              |         |                      |    |    
  |              | register|                      |    |    
  |              | &lt;-----  |                      |    |    
  |              |         |                      |    |    
  |              |         |                      |    |    
  | ret:tesult   | ret:resu|t                     |    |    
  | -----------> | --------|--------------------> | -> |    
  |                        |                      |    |    

the proxy-admin sends
  &lt;call name="register">
    &lt;li>&lt;string value="... words ..." />&lt;/li>
  &lt;/call>
to the server  

the proxy-player sends a Result to the proxy-admin 

Result  = &lt;return>&lt;string value="ColorString" />&lt;/return> 
        | &lt;return>&lt;boolean value="false">&lt;/return> 
ColorString = red | yellow | cyan | black | green | magenta 
</font>
</code>
</pre>

<p>The diagram contains several new objects: 
 a server that listens for tcp/ip requests;
 a proxy-player, which is created from the new tcp/ip port 
  and plays the role of a player to the administrator; and
 a proxy-admin, which is created in parallel with 
  the player on the client side and plays the role 
  of the administrator there. It implies that the server and
 proxy-administrator exist from the very beginning. The proxy-player comes
 about when the server receives a request to register another player. 
</p>
</li>

<li>Use case: the administrator grants a player a turn

<pre>
<code>
<font size="-1">               
   SERVER                                        CLIENT
==============================================================

 admin        proxy-player          proxy-admin      player 
  |              |                       |              |    
  | t=new() turn |                       |              |    
  | ------> |    |                       |              |    
  |         |    |                       |              |    
  | take(t) |    |                       | p=new()      |
  |         |    | take()                |  proxy-turn  |
  | ------------>| --------------------> | -----> |     |           
  |         |    |                       |        |     |
  |         |    |                       | take(p)|     |
  |         |    |                       | ---------->  |
  |         |    |                       |        |     |
  |         |    |                       |        |     |
  .         .    .                       .        .     .
  .         .    .                       .        .     .
  .         .    .                       .        .     .
  |         |    |                       |        |     |
  | &lt;------ |&lt;-- | &lt;-------------------  | &lt;----- |&lt;--- |

the proxy-player sends 
  &lt;call name="take-turn" />
to the proxy-admin

the proxy-admin sends back
  &lt;return>&lt;void />&lt;/return>
to the proxy-player 

QoS contract: a turn may not take more than 10 seconds 
</font>
</code>
</pre>

<p>Again, we need one new class of objects: proxy-turns. They play the role
of a turn on the client side. That is, they only represent the turn on the
  remote machine but actually just communicate their method calls to the
  proxy player on the server side. The following diagrams explain how the
  proxy-turn interacts with the proxy-player. 
</p>
</li>

<li>Use case: the player requests the index of the turn's tile
<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              |            |                  |  g-i  |    
  |              |&lt;---------- |&lt;---------------- |&lt;----- |    
  |              | ---------- | ---------------> |-----> | 

proxy-turn sends 
  &lt;call name="get-index" /> 
to proxy-player 

proxy-player sends 
  &lt;return>&lt;number value="Index" />&lt;return> 
to proxy-turn 
Index       = 00 | 1 | ... | 24
</font>  
</code>
</pre>
</li>

<li>Use case: the player requests the list of potential tile locations from
  the turn 
               
<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              |            |                  |  plt  |    
  |              |&lt;---------- |&lt;---------------- |&lt;----- |    
  |              | ---------- | ---------------> |-----> | 

proxy-turn sends 
  &lt;call name="potential-locations-for-tile" /> 
to proxy-player 

proxy-player sends 
  &lt;return>ListOfTile&lt;return> 
to proxy-turn 

ListOfTile = &lt;list>TileItem+&lt;/list>
TileItem   = &lt;li>Tile&lt;li />
Tile       = &lt;tile index="Index" 
                      x="Number" 
                      y="Number"
                      orientation="Orientation" />

Orientation = 0 | 90 | 180 | 270 
Number      = Integer 
</font>  
</code>
</pre>
</li>

<li>Use case: the player places a tile 

<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              |            |                  |  pt   |    
  |              |&lt;---------- |&lt;---------------- |&lt;----- |    
  |   chgGraph   |            |                  |       |    
  | &lt;----------  |            |                  |       |    
  |              | ---------- | ---------------> |-----> | 

proxy-turn sends
  &lt;call name="place-tile">
    &lt;li>Tile&lt;/li>
  &lt;/call>
to proxy-player 

proxy-player sends 
  &lt;return>&lt;void />&lt;/return> 
back to proxy-turn 
</font>
</code>
</pre>
</li>

<li>Use case: the player requests the potential locations for followers
               
<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              |            |                  |  plf  |    
  |              |&lt;---------- |&lt;---------------- |&lt;----- |    
  |              | ---------- | ---------------> |-----> | 

proxy-turn sends
  &lt;call name="potential-locaions-for-followers" /> 
to proxy-player 

proxy-player sends 
  &lt;return>
   ListOfPos
  &lt;return> 
to proxy-turn

ListOfPos = &lt;list>PosItem*&lt;/list>
PosItem   = 
  &lt;li>
    &lt;list>
      &lt;li>Tile&lt;li />
      &lt;li>&lt;number value="Position" />&lt;li />
    &lt;/list>
  &lt;li />

Position  = 0 | 90 | 180 | 270 | -100
</font>
</code>
</pre>

<p>The Place values 
<code>0</code>,
<code>90</code>,
<code>180</code>,
<code>270</code>, and 
<code>-100</code> 
represent
the northern edge, 
the eastern edge, 
the southern edge, 
the western edge, and the inside of the tile. 
</p>
</li>

<li>Use case: the player places a follower
               
<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              |            |                  |  pf   |    
  |              |&lt;---------- |&lt;---------------- |&lt;----- |    
  |   chgGraph   |            |                  |       |    
  | &lt;----------  |            |                  |       |    
  |              | ---------- | ---------------> |-----> | 

proxy-turn sends 
  &lt;call name="place-follower">
    &lt;li>Tile&lt;/li>
    &lt;li>&lt;number value="Position" />&lt;/li>
  &lt;/call> 
to proxy-player

proxy-player sends 
  &lt;return>&lt;void />&lt;/return> 
back to proxy-turn 
</font>
</code>
</pre>
</li>

<li>Use case: the turn sends the player a score and returns some followers 

<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin          turn     proxy-player      proxy-turn player 
  |              |            |                  |       |    
  |              | score_token|                  |       |    
  |              | ---------> | ---------------> | ----> |    
  |              | &lt;--------- | ---------------  | &lt;---- | 

proxy-player sends 
  &lt;call name="score-and-token">
    &lt;li>&lt;number value="Number">&lt;/li>
    &lt;li>&lt;number value="Number">&lt;/li>
  &lt;/call>
to proxy-turn 

proxy-turn sends 
  &lt;return>&lt;void />&lt;/return> 
back
</font>
</code>
</pre>
</li>

<li>Use case: the administrator sends a message to the player
               
<pre>
<code>
<font size="-1">
   SERVER                                        CLIENT
==============================================================

 admin        proxy-player          proxy-admin      player
  |              |                       |              |    
  | inform       |                       |              |     
  | ------------>| --------------------> | -----------> |
  |              |                       |              |    
  |              |                       |              |    

the proxy-player sends 
  &lt;call name="inform">
    &lt;li>&lt;string value="... words ..." />&lt;/li>
  &lt;/call> 
to the proxy-admin

the proxy-admin sends 
  &lt;return>&lt;void />&lt;/return>
back 
</font>
</code>
</pre>
</li>
</ol>

You may infer the proper XML messages for the observer methods:
<code>placed-tile</code>, <code>placed-follower</code>, and
<code>other-score-and-token</code>. The <code>get-graph</code> method is
<em>not</em> implemented. 

<hr />

<p><b>Task:</b> Your task is to implement a distributed version of your
Carcassonne project so that the player and the administrator run on different
computers. They will communicate according to the specified protocol over tcp/ip
sockets. [POINTS: 60]
</p>

<p>As you do so, you may not touch your code base. Instead, you must create
remote "proxies" that play the role of the administrator on the CLIENT machine
and the role of the player on the SERVER machine. The proxies only know how to
forward method calls and returns to the other side of the world. </p>

<hr />

<p><b>Product:</b> Mail a tar bundle with a two subdirectories labeled
  <code>YourName_Project12</code> and <code>YourName_Project11</code>. Each
  subdirectory must contain a README file and a file RUN. The former contains
  the require documentation; the latter runs the project in a standard or
  conventional fashion. [POINTS: 5]
</p>

</assignment>
</week>

